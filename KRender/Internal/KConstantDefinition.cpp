#include "KConstantDefinition.h"

namespace KConstantDefinition
{
	static ConstantBufferDetail CAMERA_DETAILS;
	static ConstantBufferDetail SHADOW_DETAILS;
	static ConstantBufferDetail DYNAMIC_CASCADED_SHADOW_DETAILS;
	static ConstantBufferDetail STATIC_CASCADED_SHADOW_DETAILS;
	static ConstantBufferDetail GLOBAL_DETAILS;
	static ConstantBufferDetail VIRTUAL_TEXTUTRE_DETAILS;
	static ConstantBufferDetail VOXEL_DETAILS;
	static ConstantBufferDetail VOXEL_CLIPMAP_DETAILS;
	static ConstantBufferDetail EMPYT_DETAILS;

	void SafeInit()
	{
		static bool CONSTANT_DETAIL_INIT = false;
		if(!CONSTANT_DETAIL_INIT)
		{
			// CAMERA
			{
				// VIEW
				{
					ConstantSemanticDetail DETAIL = { CS_VIEW, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CAMERA, VIEW), MEMBER_OFFSET(CAMERA, VIEW) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_PROJ, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CAMERA, PROJ), MEMBER_OFFSET(CAMERA, PROJ) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// VIEW_INV
				{
					ConstantSemanticDetail DETAIL = { CS_VIEW_INV, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CAMERA, VIEW_INV), MEMBER_OFFSET(CAMERA, VIEW_INV) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// PROJ_INV
				{
					ConstantSemanticDetail DETAIL = { CS_PROJ_INV, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CAMERA, PROJ_INV), MEMBER_OFFSET(CAMERA, PROJ_INV) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// VIEW_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_VIEW_PROJ, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CAMERA, VIEW_PROJ), MEMBER_OFFSET(CAMERA, VIEW_PROJ) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// PREV_VIEW_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_PREV_VIEW_PROJ, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CAMERA, PREV_VIEW_PROJ), MEMBER_OFFSET(CAMERA, PREV_VIEW_PROJ) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// PARAMETERS
				{
					ConstantSemanticDetail DETAIL = { CS_CAMERA_PARAMETERS, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(CAMERA, PARAMETERS), MEMBER_OFFSET(CAMERA, PARAMETERS) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// FRUSTUM_PLANES
				{
					ConstantSemanticDetail DETAIL = { CS_FRUSTUM_PLANES, EF_R32G32B32A32_FLOAT, 6, MEMBER_SIZE(CAMERA, FRUSTUM_PLANES), MEMBER_OFFSET(CAMERA, FRUSTUM_PLANES) };
					CAMERA_DETAILS.semanticDetails.push_back(DETAIL);
				}
				CAMERA_DETAILS.bufferSize = sizeof(CAMERA);
			}

			// SHADOW
			{
				// LIGHT_VIEW
				{
					ConstantSemanticDetail DETAIL = { CS_SHADOW_VIEW, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(SHADOW, LIGHT_VIEW), MEMBER_OFFSET(SHADOW, LIGHT_VIEW) };
					SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// LIGHT_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_SHADOW_PROJ, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(SHADOW, LIGHT_PROJ), MEMBER_OFFSET(SHADOW, LIGHT_PROJ) };
					SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// CAM_NEAR_FAR
				{
					ConstantSemanticDetail DETAIL = { CS_SHADOW_CAMERA_PARAMETERS, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(SHADOW, PARAMETERS), MEMBER_OFFSET(SHADOW, PARAMETERS) };
					SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				SHADOW_DETAILS.bufferSize = sizeof(SHADOW);
			}

			// DYNAMIC_CASCADED_SHADOW_DETAILS
			{
				// LIGHT_VIEW
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_VIEW, EF_R32G32B32A32_FLOAT, 4 * 4, MEMBER_SIZE(CASCADED_SHADOW, LIGHT_VIEW), MEMBER_OFFSET(CASCADED_SHADOW, LIGHT_VIEW) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// LIGHT_VIEW_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_VIEW_PROJ, EF_R32G32B32A32_FLOAT, 4 * 4, MEMBER_SIZE(CASCADED_SHADOW, LIGHT_VIEW_PROJ), MEMBER_OFFSET(CASCADED_SHADOW, LIGHT_VIEW_PROJ) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// LIGHT_INFO
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_LIGHT_INFO, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CASCADED_SHADOW, LIGHT_INFO), MEMBER_OFFSET(CASCADED_SHADOW, LIGHT_INFO) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// SPLIT
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_SPLIT, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(CASCADED_SHADOW, SPLIT), MEMBER_OFFSET(CASCADED_SHADOW, SPLIT) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// FRUSTUM_PLANES
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_FRUSTUM_PLANES, EF_R32G32B32A32_FLOAT, 4 * 6, MEMBER_SIZE(CASCADED_SHADOW, FRUSTUM_PLANES), MEMBER_OFFSET(CASCADED_SHADOW, FRUSTUM_PLANES) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// CENTER
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_CENTER, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(CASCADED_SHADOW, CENTER), MEMBER_OFFSET(CASCADED_SHADOW, CENTER) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// NUM_CASCADED
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_NUM_CASCADED, EF_R32_UINT, 1, MEMBER_SIZE(CASCADED_SHADOW, NUM_CASCADED), MEMBER_OFFSET(CASCADED_SHADOW, NUM_CASCADED) };
					DYNAMIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				DYNAMIC_CASCADED_SHADOW_DETAILS.bufferSize = sizeof(CASCADED_SHADOW);
			}

			// STATIC_CASCADED_SHADOW_DETAILS
			{
				// LIGHT_VIEW
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_VIEW, EF_R32G32B32A32_FLOAT, 4 * 4, MEMBER_SIZE(CASCADED_SHADOW, LIGHT_VIEW), MEMBER_OFFSET(CASCADED_SHADOW, LIGHT_VIEW) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// LIGHT_VIEW_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_VIEW_PROJ, EF_R32G32B32A32_FLOAT, 4 * 4, MEMBER_SIZE(CASCADED_SHADOW, LIGHT_VIEW_PROJ), MEMBER_OFFSET(CASCADED_SHADOW, LIGHT_VIEW_PROJ) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// LIGHT_INFO
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_LIGHT_INFO, EF_R32G32B32A32_FLOAT, 4, MEMBER_SIZE(CASCADED_SHADOW, LIGHT_INFO), MEMBER_OFFSET(CASCADED_SHADOW, LIGHT_INFO) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// SPLIT
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_SPLIT, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(CASCADED_SHADOW, SPLIT), MEMBER_OFFSET(CASCADED_SHADOW, SPLIT) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// CENTER
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_CENTER, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(CASCADED_SHADOW, CENTER), MEMBER_OFFSET(CASCADED_SHADOW, CENTER) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// FRUSTUM_PLANES
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_FRUSTUM_PLANES, EF_R32G32B32A32_FLOAT, 4 * 6, MEMBER_SIZE(CASCADED_SHADOW, FRUSTUM_PLANES), MEMBER_OFFSET(CASCADED_SHADOW, FRUSTUM_PLANES) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// NUM_CASCADED
				{
					ConstantSemanticDetail DETAIL = { CS_CASCADED_SHADOW_NUM_CASCADED, EF_R32_UINT, 1, MEMBER_SIZE(CASCADED_SHADOW, NUM_CASCADED), MEMBER_OFFSET(CASCADED_SHADOW, NUM_CASCADED) };
					STATIC_CASCADED_SHADOW_DETAILS.semanticDetails.push_back(DETAIL);
				}
				STATIC_CASCADED_SHADOW_DETAILS.bufferSize = sizeof(CASCADED_SHADOW);
			}

			// VOXEL_DETAILS
			{
				// VIEW_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_VIEW_PROJ, EF_R32G32B32A32_FLOAT, 4 * 3, MEMBER_SIZE(VOXEL, VIEW_PROJ), MEMBER_OFFSET(VOXEL, VIEW_PROJ) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// VIEW_PROJ_INV
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_VIEW_PROJ_INV, EF_R32G32B32A32_FLOAT, 4 * 3, MEMBER_SIZE(VOXEL, VIEW_PROJ_INV), MEMBER_OFFSET(VOXEL, VIEW_PROJ_INV) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MINPOINT_SCALE
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_MINPOINT_SCALE, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL, MINPOINT_SCALE), MEMBER_OFFSET(VOXEL, MINPOINT_SCALE) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MAXPOINT_SCALE
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_MAXPOINT_SCALE, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL, MAXPOINT_SCALE), MEMBER_OFFSET(VOXEL, MAXPOINT_SCALE) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_MISCS, EF_R32G32B32A32_UINT, 1, MEMBER_SIZE(VOXEL, MISCS), MEMBER_OFFSET(VOXEL, MISCS) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS2
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_MISCS2, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL, MISCS2), MEMBER_OFFSET(VOXEL, MISCS2) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS3
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_MISCS3, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL, MISCS3), MEMBER_OFFSET(VOXEL, MISCS3) };
					VOXEL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				VOXEL_DETAILS.bufferSize = sizeof(VOXEL);
			}

			// VOXEL_CLIPMAP_DETAILS
			{
				// VIEW_PROJ
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_VIEW_PROJ, EF_R32G32B32A32_FLOAT, 6 * 4 * 3, MEMBER_SIZE(VOXEL_CLIPMAP, VIEW_PROJ), MEMBER_OFFSET(VOXEL_CLIPMAP, VIEW_PROJ) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// VIEW_PROJ_INV
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_VIEW_PROJ_INV, EF_R32G32B32A32_FLOAT, 6 * 4 * 3, MEMBER_SIZE(VOXEL_CLIPMAP, VIEW_PROJ_INV), MEMBER_OFFSET(VOXEL_CLIPMAP, VIEW_PROJ_INV) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// UPDATE_REGION_MIN
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_UPDATE_REGION_MIN, EF_R32G32B32A32_FLOAT, 3 * 6, MEMBER_SIZE(VOXEL_CLIPMAP, UPDATE_REGION_MIN), MEMBER_OFFSET(VOXEL_CLIPMAP, UPDATE_REGION_MIN) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// UPDATE_REGION_MAX
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_UPDATE_REGION_MAX, EF_R32G32B32A32_FLOAT, 3 * 6, MEMBER_SIZE(VOXEL_CLIPMAP, UPDATE_REGION_MAX), MEMBER_OFFSET(VOXEL_CLIPMAP, UPDATE_REGION_MAX) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// REIGION_MIN_AND_VOXELSIZE
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_REIGION_MIN_AND_VOXELSIZE, EF_R32G32B32A32_FLOAT, 9, MEMBER_SIZE(VOXEL_CLIPMAP, REIGION_MIN_AND_VOXELSIZE), MEMBER_OFFSET(VOXEL_CLIPMAP, REIGION_MIN_AND_VOXELSIZE) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// REIGION_MAX
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_REIGION_MAX_AND_EXTENT, EF_R32G32B32A32_FLOAT, 9, MEMBER_SIZE(VOXEL_CLIPMAP, REIGION_MAX_AND_EXTENT), MEMBER_OFFSET(VOXEL_CLIPMAP, REIGION_MAX_AND_EXTENT) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_MISCS, EF_R32G32B32A32_UINT, 1, MEMBER_SIZE(VOXEL_CLIPMAP, MISCS), MEMBER_OFFSET(VOXEL_CLIPMAP, MISCS) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS2
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_MISCS2, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL_CLIPMAP, MISCS2), MEMBER_OFFSET(VOXEL_CLIPMAP, MISCS2) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS3
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_MISCS3, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL_CLIPMAP, MISCS3), MEMBER_OFFSET(VOXEL_CLIPMAP, MISCS3) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				// MISCS4
				{
					ConstantSemanticDetail DETAIL = { CS_VOXEL_CLIPMAP_MISCS4, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VOXEL_CLIPMAP, MISCS4), MEMBER_OFFSET(VOXEL_CLIPMAP, MISCS4) };
					VOXEL_CLIPMAP_DETAILS.semanticDetails.push_back(DETAIL);
				}
				VOXEL_CLIPMAP_DETAILS.bufferSize = sizeof(VOXEL_CLIPMAP);
			}
			
			// GLOBAL
			{
				// SUN_LIGHT_DIR
				{
					ConstantSemanticDetail DETAIL = { CS_GLOBAL_SUN_LIGHT_DIRECTION_AND_PBR_MAX_REFLECTION_LOD, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(GLOBAL, SUN_LIGHT_DIRECTION_AND_PBR_MAX_REFLECTION_LOD), MEMBER_OFFSET(GLOBAL, SUN_LIGHT_DIRECTION_AND_PBR_MAX_REFLECTION_LOD) };
					GLOBAL_DETAILS.semanticDetails.push_back(DETAIL);
				}
				GLOBAL_DETAILS.bufferSize = sizeof(GLOBAL);
			}

			// VIRTUAL_TEXTURE
			{
				// DESCRIPTION
				{
					ConstantSemanticDetail DETAIL = { CS_VIRTUAL_TEXTURE_DESCRIPTION, EF_R32G32B32A32_FLOAT, 1, MEMBER_SIZE(VIRTUAL_TEXTURE, DESCRIPTION), MEMBER_OFFSET(VIRTUAL_TEXTURE, DESCRIPTION) };
					VIRTUAL_TEXTUTRE_DETAILS.semanticDetails.push_back(DETAIL);
				}
				VIRTUAL_TEXTUTRE_DETAILS.bufferSize = sizeof(VIRTUAL_TEXTURE);
			}

			CONSTANT_DETAIL_INIT = true;
		}
	}

	const ConstantBufferDetail& GetConstantBufferDetail(ConstantBufferType bufferType)
	{
		SafeInit();

		switch (bufferType)
		{
		case CBT_CAMERA:
			return CAMERA_DETAILS;
		case CBT_SHADOW:
			return SHADOW_DETAILS;
		case CBT_DYNAMIC_CASCADED_SHADOW:
			return DYNAMIC_CASCADED_SHADOW_DETAILS;
		case CBT_STATIC_CASCADED_SHADOW:
			return STATIC_CASCADED_SHADOW_DETAILS;
		case CBT_VOXEL:
			return VOXEL_DETAILS;
		case CBT_VOXEL_CLIPMAP:
			return VOXEL_CLIPMAP_DETAILS;
		case CBT_GLOBAL:
			return GLOBAL_DETAILS;
		case CBT_VIRTUAL_TEXTURE_CONSTANT:
			return VIRTUAL_TEXTUTRE_DETAILS;
		default:
			assert(false && "Unknown ConstantBufferType");
			return EMPYT_DETAILS;
		}
	}
}