#pragma once
#include "KRender/Interface/IKRenderConfig.h"
#include <assert.h>

namespace KEnumString
{
	inline const char* ElementForamtToString(ElementFormat format)
	{
#define ENUM(format) case EF_##format: return #format;
		switch (format)
		{
			ENUM(R8G8B8A8_UNORM);
			ENUM(R8G8B8A8_SNORM);
			ENUM(R4G4B4A4_UNORM);
			ENUM(R5G5B5A1_UNORM);
			ENUM(R8G8B8_UNORM);
			ENUM(R8G8_UNORM);
			ENUM(R8_UNORM);
			ENUM(R16_FLOAT);
			ENUM(R16G16_FLOAT);
			ENUM(R16G16B16_FLOAT);
			ENUM(R16G16B16A16_FLOAT);
			ENUM(R32_FLOAT);
			ENUM(R32G32_FLOAT);
			ENUM(R32G32B32_FLOAT);
			ENUM(R32G32B32A32_FLOAT);
			ENUM(R16_UINT);
			ENUM(R32_UINT);
			ENUM(R32G32B32A32_UINT);
			ENUM(R32_INT);
			ENUM(R32G32B32A32_INT);
			ENUM(ETC1_R8G8B8_UNORM);
			ENUM(ETC2_R8G8B8_UNORM);
			ENUM(ETC2_R8G8B8A1_UNORM);
			ENUM(ETC2_R8G8B8A8_UNORM);
			ENUM(BC1_RGB_UNORM);
			ENUM(BC1_RGB_SRGB);
			ENUM(BC1_RGBA_UNORM);
			ENUM(BC1_RGBA_SRGB);
			ENUM(BC2_UNORM);
			ENUM(BC2_SRGB);
			ENUM(BC3_UNORM);
			ENUM(BC3_SRGB);
			ENUM(BC4_UNORM);
			ENUM(BC4_SNORM);
			ENUM(BC5_UNORM);
			ENUM(BC5_SNORM);
			ENUM(BC6H_UFLOAT);
			ENUM(BC6H_SFLOAT);
			ENUM(BC7_UNORM);
			ENUM(BC7_SRGB);

			ENUM(ASTC_4x4_UNORM);
			ENUM(ASTC_4x4_SRGB);
			ENUM(ASTC_5x4_UNORM);
			ENUM(ASTC_5x4_SRGB);
			ENUM(ASTC_5x5_UNORM);
			ENUM(ASTC_5x5_SRGB);
			ENUM(ASTC_6x5_UNORM);
			ENUM(ASTC_6x5_SRGB);
			ENUM(ASTC_6x6_UNORM);
			ENUM(ASTC_6x6_SRGB);
			ENUM(ASTC_8x5_UNORM);
			ENUM(ASTC_8x5_SRGB);
			ENUM(ASTC_8x6_UNORM);
			ENUM(ASTC_8x6_SRGB);
			ENUM(ASTC_8x8_UNORM);
			ENUM(ASTC_8x8_SRGB);
			ENUM(ASTC_10x5_UNORM);
			ENUM(ASTC_10x5_SRGB);
			ENUM(ASTC_10x6_UNORM);
			ENUM(ASTC_10x6_SRGB);
			ENUM(ASTC_10x8_UNORM);
			ENUM(ASTC_10x8_SRGB);
			ENUM(ASTC_10x10_UNORM);
			ENUM(ASTC_10x10_SRGB);
			ENUM(ASTC_12x10_UNORM);
			ENUM(ASTC_12x10_SRGB);
			ENUM(ASTC_12x12_UNORM);
			ENUM(ASTC_12x12_SRGB);

		default:
			assert(false);
			return "UNKNOWN";
		};
#undef ENUM
	}

	inline ElementFormat StringToElementForamt(const char* str)
	{
#define CMP(enum_string) if (!strcmp(str, #enum_string)) return EF_##enum_string;
		CMP(R8G8B8A8_UNORM);
		CMP(R8G8B8A8_SNORM);
		CMP(R4G4B4A4_UNORM);
		CMP(R5G5B5A1_UNORM);
		CMP(R8G8B8_UNORM);
		CMP(R16_FLOAT);
		CMP(R16G16_FLOAT);
		CMP(R16G16B16_FLOAT);
		CMP(R16G16B16A16_FLOAT);
		CMP(R32_FLOAT);
		CMP(R32G32_FLOAT);
		CMP(R32G32B32_FLOAT);
		CMP(R32G32B32A32_FLOAT);
		CMP(R16_UINT);
		CMP(R32_UINT);
		CMP(R32G32B32A32_UINT);
		CMP(R32_INT);
		CMP(R32G32B32A32_INT);
		CMP(ETC1_R8G8B8_UNORM);
		CMP(ETC2_R8G8B8_UNORM);
		CMP(ETC2_R8G8B8A1_UNORM);
		CMP(ETC2_R8G8B8A8_UNORM);
		CMP(BC1_RGB_UNORM);
		CMP(BC1_RGB_SRGB);
		CMP(BC1_RGBA_UNORM);
		CMP(BC1_RGBA_SRGB);
		CMP(BC2_UNORM);
		CMP(BC2_SRGB);
		CMP(BC3_UNORM);
		CMP(BC3_SRGB);
		CMP(BC4_UNORM);
		CMP(BC4_SNORM);
		CMP(BC5_UNORM);
		CMP(BC5_SNORM);
		CMP(BC6H_UFLOAT);
		CMP(BC6H_SFLOAT);
		CMP(BC7_UNORM);
		CMP(BC7_SRGB);

		CMP(ASTC_4x4_UNORM);
		CMP(ASTC_4x4_SRGB);
		CMP(ASTC_5x4_UNORM);
		CMP(ASTC_5x4_SRGB);
		CMP(ASTC_5x5_UNORM);
		CMP(ASTC_5x5_SRGB);
		CMP(ASTC_6x5_UNORM);
		CMP(ASTC_6x5_SRGB);
		CMP(ASTC_6x6_UNORM);
		CMP(ASTC_6x6_SRGB);
		CMP(ASTC_8x5_UNORM);
		CMP(ASTC_8x5_SRGB);
		CMP(ASTC_8x6_UNORM);
		CMP(ASTC_8x6_SRGB);
		CMP(ASTC_8x8_UNORM);
		CMP(ASTC_8x8_SRGB);
		CMP(ASTC_10x5_UNORM);
		CMP(ASTC_10x5_SRGB);
		CMP(ASTC_10x6_UNORM);
		CMP(ASTC_10x6_SRGB);
		CMP(ASTC_10x8_UNORM);
		CMP(ASTC_10x8_SRGB);
		CMP(ASTC_10x10_UNORM);
		CMP(ASTC_10x10_SRGB);
		CMP(ASTC_12x10_UNORM);
		CMP(ASTC_12x10_SRGB);
		CMP(ASTC_12x12_UNORM);
		CMP(ASTC_12x12_SRGB);

		assert(false);
		return EF_UNKNOWN;
#undef CMP
	}
}