m4_comment([$Id: repmgr_ack_policy.so,v 1.6 2008/01/30 20:14:30 sue Exp $])

define(M4PAGELOCAL, [repmgr_set_ack_policy, repmgr_get_ack_policy,
    DB_REPMGR_ACKS_ALL, DB_REPMGR_ACKS_ALL_PEERS, DB_REPMGR_ACKS_NONE,
    DB_REPMGR_ACKS_ONE, DB_REPMGR_ACKS_ONE_PEER, DB_REPMGR_ACKS_QUORUM])

include(m4/m4.seealso)

m4_pf_header(m4_ref(repmgr_set_ack_policy),
ifelse(M4API, C_API, [dnl
int
DB_ENV-__GT__repmgr_set_ack_policy(DB_ENV *env, int ack_policy);
m4_blank
int
DB_ENV-__GT__repmgr_get_ack_policy(DB_ENV *env, int *ack_policyp);
])
ifelse(M4API, CXX_API, [dnl
int
DbEnv::repmgr_set_ack_policy(int ack_policy);
m4_blank
int
DbEnv::repmgr_get_ack_policy(int *ack_policyp);
]))

m4_p([dnl
The m4_refT(repmgr_set_ack_policy) specifies how master and client sites
will handle acknowledgment of replication messages which are necessary
for "permanent" records.  The current implementation requires all
sites in a replication group configure the same acknowledgement
policy.])

m4_env_config(repmgr_set_ack_policy, replication subsystem,
repmgr_set_ack_policy, [dnl
the m4_arg(ack_policy) parameter specified as a string.
For example, "repmgr_set_ack_policy DB_REPMGR_ACKS_ALL"])

m4_scope_env(repmgr_set_ack_policy)
m4_when_any(repmgr_set_ack_policy)
m4_return(repmgr_set_ack_policy, std)

m4_parambegin
m4_param(ack_policy, [dnl
The m4_arg(ack_policy) parameter must be set to one of the following
values:])

m4_tagbegin
m4_tag(m4_idef(DB_REPMGR_ACKS_ALL), [dnl
The master should wait until all replication clients have acknowledged
each permanent replication message.])

m4_tag(m4_idef(DB_REPMGR_ACKS_ALL_PEERS), [dnl
The master should wait until all electable peers have acknowledged each
permanent replication message (where "electable peer" means a client
capable of being subsequently elected master of the replication
group).])

m4_tag(m4_idef(DB_REPMGR_ACKS_NONE), [dnl
The master should not wait for any client replication message
acknowledgments.])

m4_tag(m4_idef(DB_REPMGR_ACKS_ONE), [dnl
The master should wait until at least one client site has acknowledged
each permanent replication message.])

m4_tag(m4_idef(DB_REPMGR_ACKS_ONE_PEER), [dnl
The master should wait until at least one electable peer has
acknowledged each permanent replication message (where "electable peer"
means a client capable of being subsequently elected master of the
replication group).])

m4_tag(m4_idef(DB_REPMGR_ACKS_QUORUM), [dnl
The master should wait until it has received acknowledgements from the
minimum number of electable peers sufficient to ensure that the effect
of the permanent record remains durable if an election is held (where
"electable peer" means a client capable of being subsequently elected
master of the replication group).  This is the default acknowledgement
policy.])

m4_tagend

m4_p([dnl
Waiting for client acknowledgements is always limited by the
m4_ref(DB_REP_ACK_TIMEOUT) specified by m4_ref(rep_set_timeout).])

m4_paramend

m4_pf_getter(repmgr_get_ack_policy,
replication manager's client acknowledgment policy,, ack_policyp)

m4_seealso(Replication)
m4_page_footer
