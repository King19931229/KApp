m4_comment([$Id: mastersync.so,v 1.14 2008/02/29 18:28:33 sue Exp $])

m4_ref_title(m4_db Replication,
    Synchronizing with a master,, rep/elect, rep/init)

m4_p([dnl
When a client detects a new replication group master, the client must
synchronize with the new master before the client can process new
database changes.  Synchronizing is a heavyweight operation which can
place a burden on both the client and the master.  There are several
controls an application can use to reduce the synchronization burden.])

m4_section([Delaying client synchronization])

m4_p([dnl
When a replication group has a new master, either as specified by the
application or as a result of winning an election, all clients in the
replication group must synchronize with the new master.  This can
strain the resources of the new master since a large number of clients
may be attempting to communicate with and transfer records from the
master.  Client applications wanting to delay client synchronization
should call the m4_refT(rep_set_config) with the
m4_ref(DB_REP_CONF_DELAYCLIENT) flag.  The application will be
notified of the establishment of the new master as usual, but the
client will not proceed to synchronize with the new master.])

m4_p([dnl
Applications learn of a new master via the
m4_ref(DB_EVENT_REP_NEWMASTER) event.])

m4_p([dnl
Client applications choosing to delay synchronization in this manner are
responsible for synchronizing the client environment at some future time
using the m4_refT(rep_sync).])

m4_section([Client-to-client synchronization])

m4_p([dnl
Instead of synchronizing with the new master, it is sometimes possible
for a client to synchronize with another client.  m4_db initiates
synchronization at the client by sending a request message via the
transport call-back function of the communication infrastructure.  The
message is destined for the master site, but is also marked with a
m4_ref(DB_REP_ANYWHERE) flag.  The application may choose to send such
a request to another client, or to ignore the flag, sending it to its
indicated destination.])

m4_p([dnl
Furthermore, when the other client receives such a request it may be
unable to satisfy it.  In this case it will reply to the requesting
client, telling it that it is unable to provide the requested
information.  The requesting client will then re-issue the request.
Additionally, if the original request never reaches the other client,
the requesting client will again re-issue the request.  In either of
these cases the message will be marked with the m4_ref(DB_REP_REREQUEST)
flag.  The application may continue trying to find another client to
service the request, or it may give up and simply send it to the master
(that is, the environment ID explicitly specified to the transport
function).])

m4_p([dnl
Applications written to the Base replication API have complete freedom
in choosing where to send these m4_ref(DB_REP_ANYWHERE) requests, and
in deciding how to handle m4_ref(DB_REP_REREQUEST).])

m4_p([dnl
Replication Manager allows an application to designate one remote site
(called its "peer") to receive client-to-client requests, via the
flags parameter to the m4_refT(repmgr_add_remote_site).  Replication
Manager will always first try to send requests marked with the
m4_ref(DB_REP_ANYWHERE) flag to its peer, if available.  However, it
will always send a m4_ref(DB_REP_REREQUEST) to the master site.])

m4_p([dnl
The delayed synchronization and client-to-client synchronization
features allow applications to do load balancing within replication
groups.  For example, consider a replication group with 5 sites, A, B,
C, D and E.  Site E just crashed, and site A was elected master.  Sites
C and D have been configured for delayed synchronization.  When site B
is notified that site A is a new master, it immediately synchronizes.
When B finishes synchronizing with the master, the application calls the
m4_refT(rep_sync) on sites C and D to cause them to synchronize as well.
Sites C and D (and E, when it has finished rebooting) can send their
requests to site B, and B then bears the brunt of the work and
network traffic for synchronization, making master site A available to
handle the normal application load and any write requests paused by
the election.])

m4_section([Blocked client operations])

m4_p([dnl
Clients in the process of synchronizing with the master block access to
m4_db operations.  By default, most m4_db(Db) methods will block until
client synchronization is complete, and then the method call proceeds.])

m4_p([dnl
Client applications which cannot wait and would prefer an immediate
error return instead of blocking, should call the
m4_refT(rep_set_config) with the m4_ref(DB_REP_CONF_NOWAIT) flag.  This
configuration causes m4_ref(Db) method calls to immediately return a
m4_ref(DB_REP_LOCKOUT) error instead of blocking, if the client is
currently synchronizing with the master.])

m4_section([Clients too far out-of-date to synchronize])

m4_p([dnl
Clients attempting to synchronize with the master may discover that
synchronization is not possible because the client no longer has any
overlapping information with the master site.  By default, the master and
client automatically detect this state and perform an internal initialization
of the client.  Because internal initialization requires transfer of
entire databases to the client, it can take a relatively long period of
time and may require database handles to be reopened in the client
applications.])

m4_p([dnl
Client applications which cannot wait or would prefer
to do a hot backup instead of performing internal initialization, should
call the m4_refT(rep_set_config) with the m4_ref(DB_REP_CONF_NOAUTOINIT)
flag.  This configuration flag causes m4_db to return
m4_ref(DB_REP_JOIN_FAILURE) to the application instead of performing
internal initialization.])

m4_page_footer
