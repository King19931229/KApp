m4_comment([$Id: env.so,v 1.9 2007/09/26 15:11:31 bostic Exp $])

m4_ref_title(Upgrading m4_db Applications,
    Release 4.0: db_env_set_XXX,,
    upgrade.4.0/txn, upgrade.4.0/rpc)

m4_p([dnl
The db_env_set_region_init function was removed in the 4.0 release and
replaced with the m4_ref(DB_REGION_INIT) flag to the
m4_refT(dbenv_set_flags).  This is an interface change: historically,
the db_env_set_region_init function operated on the entire m4_db
library, not a single environment.  The new method only operates on
a single m4_ref(DbEnv) handle (and any handles created in the scope of
that handle).  Applications calling the db_env_set_region_init function
should update their calls: calls to the historic routine with an
argument of 1 (0) are equivalent to calling m4_ref(dbenv_set_flags) with
the m4_ref(DB_REGION_INIT) flag and an argument of 1 (0).])

m4_p([dnl
The db_env_set_tas_spins function was removed in the 4.0 release and
replaced with the DB_ENV-__GT__set_tas_spins method.  This is an
interface change: historically, the db_env_set_tas_spins function
operated on the entire m4_db library, not a single environment.  The new
method only operates on a single m4_ref(DbEnv) handle (and any handles
created in the scope of that handle).  Applications calling the
db_env_set_tas_spins function should update their calls: calls to the
historic routine are equivalent to calling DB_ENV-__GT__set_tas_spins
with the same argument.  In addition, for consistent behavior, all
m4_ref(DbEnv) handles opened by the application should make the same
configuration call, or the value will need to be entered into the
environment's m4_ref(DB_CONFIG) file.])

m4_p([dnl
Also, three of the standard m4_db debugging interfaces changed in the
4.0 release.  It is quite unlikely that m4_db applications use these
interfaces.])

m4_p([dnl
The DB_ENV-__GT__set_mutexlocks method was removed in the 4.0 release
and replaced with the m4_ref(DB_NOLOCKING) flag to the
m4_refT(dbenv_set_flags).  Applications calling the
DB_ENV-__GT__set_mutexlocks method should update their calls: calls
to the historic routine with an argument of 1 (0) are equivalent to
calling m4_ref(dbenv_set_flags) with the m4_ref(DB_NOLOCKING) flag and
an argument of 1 (0).])

m4_p([dnl
The db_env_set_pageyield function was removed in the 4.0 release and
replaced with the m4_ref(DB_YIELDCPU) flag to the
m4_refT(dbenv_set_flags).  This is an interface change: historically,
the db_env_set_pageyield function operated on the entire m4_db library,
not a single environment.  The new method only operates on a single
m4_ref(DbEnv) handle (and any handles created in the scope of that
handle).  Applications calling the db_env_set_pageyield function should
update their calls: calls to the historic routine with an argument of 1
(0) are equivalent to calling m4_ref(dbenv_set_flags) with the
m4_ref(DB_YIELDCPU) flag and an argument of 1 (0).  In addition, all
m4_ref(DbEnv) handles opened by the application will need to make the
same call, or the m4_ref(DB_YIELDCPU) flag will need to be entered into
the environment's m4_ref(DB_CONFIG) file.])

m4_p([dnl
The db_env_set_panicstate function was removed in the 4.0 release,
replaced with the m4_ref(DB_PANIC_ENVIRONMENT) and m4_ref(DB_NOPANIC)
flags to the m4_refT(dbenv_set_flags).  (The
m4_ref(DB_PANIC_ENVIRONMENT) flag will cause an environment to panic,
affecting all threads of control using that environment.  The
m4_ref(DB_NOPANIC) flag will cause a single m4_ref(DbEnv) handle to
ignore the current panic state of the environment.)   This is an
interface change: historically the db_env_set_panicstate function
operated on the entire m4_db library, not a single environment.
Applications calling the db_env_set_panicstate function should update
their calls, replacing the historic call with a call to
m4_ref(dbenv_set_flags) and the appropriate flag, depending on their
usage of the historic interface.])

m4_page_footer
