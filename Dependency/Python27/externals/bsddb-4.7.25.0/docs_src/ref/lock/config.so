m4_comment([$Id: config.so,v 10.22 2008/04/23 14:50:45 margo Exp $])

m4_ref_title(Locking Subsystem,
    Configuring locking, @locking configuration, lock/intro, lock/max)

m4_p([dnl
The m4_refT(dbenv_set_lk_detect) specifies that the deadlock detector
should be run whenever a lock is about to block.  This option provides
for rapid detection of deadlocks at the expense of potentially frequent
invocations of the deadlock detector.  On a fast processor with a highly
contentious application where response time is critical, this is a good
choice.  An option argument to the m4_refT(dbenv_set_lk_detect)
indicates which lock requests should be rejected.])

m4_p([dnl
The application can limit how long it blocks on a contested resource.
The m4_refT(dbenv_set_timeout) specifies the length of the timeout.
This value is checked whenever deadlock detection is performed,
so the accuracy of the timeout depends upon the frequency of
deadlock detection.])

m4_p([dnl
In general, when applications are not specifying lock and transaction
timeout values, the m4_ref(DB_LOCK_DEFAULT) option is probably the
correct first choice, and other options should only be selected based
on evidence that they improve transaction throughput.  If an application
has long-running transactions, m4_ref(DB_LOCK_YOUNGEST) will guarantee
that transactions eventually complete, but it may do so at the expense
of a large number of lock request rejections (and therefore, transaction
aborts).])

m4_p([dnl
The alternative to using the m4_refT(dbenv_set_lk_detect) is to
explicitly perform deadlock detection using the m4_db
m4_refT(lock_detect).])

m4_p([dnl
The m4_refT(dbenv_set_lk_conflicts) allows you to specify your own
locking conflicts matrix.  This is an advanced configuration option,
and is almost never necessary.])

m4_page_footer
