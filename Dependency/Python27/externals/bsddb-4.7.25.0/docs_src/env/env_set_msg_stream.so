m4_comment([$Id: env_set_msg_stream.so,v 10.5 2006/02/10 22:54:59 bostic Exp $])

ifdef([M4INTERFACE],, [define(M4INTERFACE, dbenv_set_message_stream)])

define(M4PAGELOCAL, M4INTERFACE)
include(m4/m4.seealso)

ifelse(M4INTERFACE, dbenv_set_message_stream, [dnl
m4_pf_header(m4_ref(dbenv_set_message_stream),
void DbEnv::set_message_stream(class ostream*);
)],[dnl
m4_pf_header(m4_ref(dbh_set_message_stream),
void Db::set_message_stream(class ostream*);
)])

m4_p([dnl
There are interfaces in the m4_db library which either directly output
informational messages or statistical information, or configure the
library to output such messages when performing other operations, for
example, m4_ref(dbenv_set_verbose) and m4_ref(dbenv_stat_print).])

m4_p([dnl
The m4_ref(dbenv_set_message_stream) and
m4_refT(dbh_set_message_stream)s are used to display these messages for
the application.  In this case, the message will include a trailing
m4_htmlquote(newline) character.])

m4_p([dnl
Setting m4_arg(stream) to NULL unconfigures the interface.])

m4_p([dnl
Alternatively, you can use the m4_ref(dbenv_set_msgfile) and
m4_refT(dbh_set_msgfile)s to display the messages via a C library FILE *,
or the m4_ref(dbenv_set_msgcall) and m4_refT(dbh_set_msgcall)s to
capture the additional error information in a way that does not use
either output streams or C library FILE *'s.  You should not mix these
approaches.])

ifelse(M4INTERFACE, dbh_set_message_stream, [dnl
m4_really_dbenv(dbh_set_message_stream, dbenv_set_message_stream)])

ifelse(M4INTERFACE, dbh_set_message_stream,
[m4_scope_dbh(M4INTERFACE)], [m4_scope_dbenv(M4INTERFACE)])

m4_when_any(M4INTERFACE)

m4_parambegin
m4_param(stream, [dnl
The m4_arg(stream) parameter is the application-specified output stream to
be used for additional message information.])
m4_paramend

ifelse(M4INTERFACE,
dbenv_set_message_stream, [m4_seealso(DbEnv)], [m4_seealso(Db)])

m4_page_footer
