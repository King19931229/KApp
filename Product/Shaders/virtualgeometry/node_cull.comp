#include "vg_define.h"
#include "culling.h"
#include "wave.h"

shared uvec4 SharedCandidateNodeBatch[BVH_MAX_GROUP_BATCH_SIZE];

#define DEBUG_SHADER_GROUP 0
#define EMIT_CLUSTER_EACH_THREAD 1

bool IsSharedHierarchyDataValid(uint index)
{
	return SharedCandidateNodeBatch[index].x != 0xFFFFFFFF;
}

void ProcessNodeBatch(uint groupIndex, uint batchStart, uint batchSize)
{
	uint localIndex = groupIndex / BVH_MAX_NODES;
	uint childIndex = groupIndex & BVH_NODE_MASK;

#if DEBUG_SHADER_GROUP
	uint globalIndex = batchStart + localIndex;
	if (localIndex >= batchSize)
	{
		return;
	}
	CandidateNode nodeBatch = UnpackCandidateNode(CandidateNodeBatch[globalIndex]);
#else
	if (!IsSharedHierarchyDataValid(localIndex))
	{
		return;
	}
	CandidateNode nodeBatch = UnpackCandidateNode(SharedCandidateNodeBatch[localIndex]);
#endif

	uint instanceId = nodeBatch.instanceId;
	uint resourceIndex = InstanceData[instanceId].resourceIndex;

	ClusterHierarchyStruct hierarchy;
	GetHierarchyData(nodeBatch, hierarchy);

	uint isLeaf = hierarchy.isLeaf;

	mat4 localToWorld = InstanceData[instanceId].transform;

	vec3 boundCenter = hierarchy.lodBoundCenterError.xyz;
	float maxParentError = hierarchy.lodBoundCenterError.w;
	vec3 boundHalfExtend = hierarchy.lodBoundHalfExtendRadius.xyz;
	float radius = hierarchy.lodBoundHalfExtendRadius.w;

	FrustumCullData cullData = BoxCullFrustumGeneral(boundCenter, boundHalfExtend, localToWorld, worldToClip, true, false);

#if CULL_CLUSTER_ALONG_BVH
	if (cullData.bIsVisible)
	{
#if USE_INSTANCE_CENTER_CULL
		cullData.bIsVisible = ShouldVisitChild(localToWorld, worldToView, vec3(0, 0, 0), radius, maxParentError);
#else
		cullData.bIsVisible = ShouldVisitChild(localToWorld, worldToView, boundCenter, radius, maxParentError);
#endif
	}
#endif

	if (!cullData.bIsVisible)
	{
		return;
	}

	if (isLeaf == 0)
	{
		uint nodeIndex = hierarchy.children[childIndex];
		if (nodeIndex != INVALID_INDEX)
		{
			uint nodeWriteOffset = 0;
			WAVE_INTERLOCK_ADD(QueueState[0].nodeWriteOffset, 1, nodeWriteOffset);
			if (nodeWriteOffset < MAX_CANDIDATE_NODE)
			{
				CandidateNode node;
				node.instanceId = instanceId;
				node.nodeIndex = nodeIndex;
				StoreCandidateNode(nodeWriteOffset, node);
				// ExtraDebugInfo[nodeWriteOffset] = groupIndex; //uint(IsSharedHierarchyDataValid(localIndex));
			}
		}
	}
	// Leaf
	else
	{
#if EMIT_CLUSTER_EACH_THREAD
		uint clusterNumPerChild = hierarchy.clusterNum / BVH_MAX_NODES;
		uint clusterNumPerChildRest = hierarchy.clusterNum & BVH_NODE_MASK;

		uint clusterStart = hierarchy.clusterStart + childIndex * clusterNumPerChild + uint(childIndex != 0) * clusterNumPerChildRest;
		uint clusterNum = clusterNumPerChild + uint(childIndex == 0) * clusterNumPerChildRest;
		if (clusterNum == 0)
		{
			return;
		}
#else
		if (childIndex != 0)
		{
			return;
		}
		uint clusterStart = hierarchy.clusterStart;
		uint clusterNum = hierarchy.clusterNum;
#endif
		uint clusterWriteOffset = 0;
		WAVE_INTERLOCK_ADD(QueueState[0].clusterWriteOffset, clusterNum, clusterWriteOffset);

		for (uint i = 0; i < clusterNum; ++i)
		{
			if (clusterWriteOffset + i >= MAX_CANDIDATE_CLUSTER)
			{
				break;
			}
			CandidateCluster candidateCluster;
			candidateCluster.instanceId = instanceId;
			candidateCluster.clusterIndex = clusterStart + i;
			StoreCandidateCluster(clusterWriteOffset + i, candidateCluster);
		}
	}
}

layout(local_size_x = VG_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupID = gl_WorkGroupID.x;
	uint groupIndex = gl_LocalInvocationID.x;
	uint maxBatchNodes = QueueState[0].nodePrevWriteOffset - QueueState[0].nodeReadOffset;

	uint batchStart = QueueState[0].nodeReadOffset + groupID * BVH_MAX_GROUP_BATCH_SIZE;
	uint batchSize = min(batchStart + BVH_MAX_GROUP_BATCH_SIZE, QueueState[0].nodePrevWriteOffset) - batchStart;

	uint localIndex = groupIndex / BVH_MAX_NODES;
	uint childIndex = groupIndex & BVH_NODE_MASK;

#if !DEBUG_SHADER_GROUP
	uint nodeIndex = batchStart + localIndex;
	if (childIndex == 0)
	{
		if (localIndex < batchSize)
		{
			SharedCandidateNodeBatch[localIndex] = CandidateNodeBatch[nodeIndex];
		}
		else
		{
			SharedCandidateNodeBatch[localIndex] = uvec4(0xFFFFFFFF);
		}
	}
	memoryBarrierShared(); // barrier();
#endif

	ProcessNodeBatch(groupIndex, batchStart, batchSize);

#if !DEBUG_SHADER_GROUP
	if (IsSharedHierarchyDataValid(localIndex))
	{
		CandidateNodeBatch[nodeIndex] = uvec4(0xFFFFFFFF);
	}
#endif
}