#include "vg_define.h"
#include "culling.h"
#include "wave.h"

layout(local_size_x = VG_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupID = gl_WorkGroupID.x;
	uint groupIndex = gl_LocalInvocationID.x;

	uint batchStart = groupID * VG_GROUP_SIZE;
	uint batchSize = min(batchStart + VG_GROUP_SIZE, QueueState[QUEUE_STATE_INDEX].visibleClusterNum) - batchStart;

	if (groupIndex < batchSize)
	{
		uint batchIndex = batchStart + groupIndex;

		CandidateCluster selectedCluster = UnpackCandidateCluster(SelectedClusterBatch[batchIndex]);
		uint instanceId = selectedCluster.instanceId;

		ClusterBatchStruct clusterBatch;
		GetClusterBatchData(selectedCluster, clusterBatch);

		uint resourceIndex = InstanceData[instanceId].resourceIndex;
		uint gpuPageIndex = selectedCluster.gpuPageIndex;

		uint batchNum = clusterBatch.batchNum;
		for (uint i = 0; i < batchNum; i++)
		{
			uint materialIndex = 0;
			uint rangeBegin = 0;
			uint rangeEnd = 0;
			GetMaterialIndexAndRange(resourceIndex, gpuPageIndex, i, clusterBatch, materialIndex, rangeBegin, rangeEnd);

			uint binningIndex = InstanceData[instanceId].binningBaseIndex + materialIndex;
#if defined(BINNING_CLASSIFY)
			INTERLOCK_ADD_ONLY(BinningHeader[binningIndex].x, 1);
#elif defined(BINNING_SCATTER)
			BinningBatch batch;
			batch.batchIndex = batchIndex;
			batch.binningIndex = binningIndex;
			batch.rangeBegin = rangeBegin;
			batch.rangeNum = rangeEnd - rangeBegin + 1;

			uint offset = 0;

			offset = binningIndex * 4;
			offset += INDIRECT_DRAW_ARGS_OFFSET;

			uint batchOffset = 0;
			INTERLOCK_ADD(IndirectDrawArgs[offset + 1], 1, batchOffset);
			uint binningWriteOffset = BinningHeader[binningIndex].y + batchOffset;

			StoreBinningBatch(binningWriteOffset, batch);

			offset = binningIndex * 3;
			offset += INDIRECT_MESH_ARGS_OFFSET;

			INTERLOCK_ADD_ONLY(IndirectMeshArgs[offset], 1);
#endif
		}
	}
}