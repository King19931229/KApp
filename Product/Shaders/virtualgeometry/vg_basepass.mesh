#include "vg_define.h"
#include "wave.h"

#extension GL_EXT_mesh_shader : require

#define VERTEX_REUSE_BATCH 0

#if VERTEX_REUSE_BATCH
#define VG_MESH_SHADER_GROUP_SIZE 32
#else
#define VG_MESH_SHADER_GROUP_SIZE 128
#endif

#define VG_MESH_SHADER_VERTEX_PER_THREAD ((MAX_CLUSTER_VERTEX_NUM + VG_MESH_SHADER_GROUP_SIZE - 1)  / VG_MESH_SHADER_GROUP_SIZE)
#define VG_MESH_SHADER_TRIANGLE_PER_THREAD ((MAX_CLUSTER_TRIANGLE_NUM + VG_MESH_SHADER_GROUP_SIZE - 1) / VG_MESH_SHADER_GROUP_SIZE)

layout(local_size_x = VG_MESH_SHADER_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(max_vertices = MAX_CLUSTER_VERTEX_NUM, max_primitives = MAX_CLUSTER_TRIANGLE_NUM) out;
layout(triangles) out;

layout(location = 0) out vec2 outTexCoord[];
layout(location = 1) out vec3 outWorldPos[];
layout(location = 2) out vec3 outPrevWorldPos[];
layout(location = 3) out vec3 outWorldNormal[];
layout(location = 4) out vec3 outVertexColor[];

uint FindNthSetBit(uint mask, uint index)
{
	uint last = bitCount(mask) - index - 1;
	uint p = 16;
	p += bitCount(mask >> p) <= last ? -8 : 8;
	p += bitCount(mask >> p) <= last ? -4 : 4;
	p += bitCount(mask >> p) <= last ? -2 : 2;
	p += bitCount(mask >> p) <= last ? -1 : 1;
	p  = bitCount(mask >> p) == last ? (p - 1) : p;
	return p;
}

uint FindNthSetBit(uvec2 mask, uint index)
{
	uint lowPop = bitCount(mask.x);
	return FindNthSetBit(index < lowPop ? mask.x : mask.y, index < lowPop ? index : index - lowPop) + (index < lowPop ? 0 : 32);
}

// Prefix sum of Bits masked to the bits lower than Index.
uint MaskedBitCount(uvec2 bits, uint index)
{
	bool bLow = index < 32;

	uint mask = 1u << (index - (bLow ? 0 : 32));
	mask -= 1;

	uint offset;
	offset  = bitCount(bits.x & (bLow ? mask : ~0));
	offset += bitCount(bits.y & (bLow ? 0 : mask));
	return offset;
}

uint DeduplicateVertexIndex(in uint batchIndex, in uint batchTriangleNum, in uint laneIndex, in uint triangleIndex, out uint uniqueVertexIndex, out uvec3 vertexLaneIndices)
{
	uvec3 vertexIndices = uvec3(0);
	uvec2 vertexUsedHash = uvec2(0);

	uint baseVertexIndex = 0;

	if (laneIndex < batchTriangleNum)
	{
		for (uint i = 0; i < 3; ++i)
		{
			DecodeClusterBatchDataIndex(triangleIndex, i, batchIndex, vertexIndices[i]);
		}
		// baseVertexIndex = subgroupMin(min(min(vertexIndices[0], vertexIndices[1]),vertexIndices[2]));
		baseVertexIndex = subgroupMin(vertexIndices[0]);
		vertexIndices -= uvec3(baseVertexIndex);
		for (uint i = 0; i < 3; ++i)
		{
			if (vertexIndices[i] < 32)
			{
				vertexUsedHash[0] |= 1 << vertexIndices[i];
			}
			else
			{
				vertexUsedHash[1] |= 1 << (vertexIndices[i] & 31);
			}
		}
	}

	vertexUsedHash[0] = subgroupOr(vertexUsedHash[0]);
	vertexUsedHash[1] = subgroupOr(vertexUsedHash[1]);

	uniqueVertexIndex = FindNthSetBit(vertexUsedHash, laneIndex) + subgroupBroadcastFirst(baseVertexIndex);

	for (uint i = 0; i < 3; ++i)
	{
		vertexLaneIndices[i] = MaskedBitCount(vertexUsedHash, vertexIndices[i]);
	}

	return bitCount(vertexUsedHash[0]) + bitCount(vertexUsedHash[1]);
}

void main()
{
	uint workIndex = gl_WorkGroupID.x;
	uint threadIndex = gl_LocalInvocationID.x;

	Binning binning = GetBinning(materialBinningIndex, workIndex);

	uint batchIndex = binning.clusterIndex;
	uint batchTriangleBegin = binning.rangeBegin;
	uint batchTriangleNum = binning.rangeNum;
	uint batchTriangleEnd = batchTriangleBegin + batchTriangleNum;

	// TODO
	uint batchVertexNum = MAX_CLUSTER_VERTEX_NUM;

#if VERTEX_REUSE_BATCH == 0
	for (uint loop = 0; loop < VG_MESH_SHADER_TRIANGLE_PER_THREAD; ++loop)
	{
		uint triangleIndex = batchTriangleBegin + threadIndex + loop * VG_MESH_SHADER_GROUP_SIZE;
		if (triangleIndex - batchTriangleBegin >= batchTriangleNum)
		{
			break;
		}

		uint index;
		for (uint i = 0; i < 3; ++i)
		{
			DecodeClusterBatchDataIndex(triangleIndex, i, batchIndex, index);
			gl_PrimitiveTriangleIndicesEXT[triangleIndex - batchTriangleBegin][i] = index;
		}
	}

	for (uint loop = 0; loop < VG_MESH_SHADER_VERTEX_PER_THREAD; ++loop)
	{
		uint vertexIndex = threadIndex + loop * VG_MESH_SHADER_GROUP_SIZE;
		if (vertexIndex >= batchVertexNum)
		{
			break;
		}

		mat4 localToWorld;
		vec3 position;
		vec3 normal;
		vec2 uv;

		uint index = vertexIndex;
		DecodeClusterBatchDataVertex(index, batchIndex, localToWorld, position, normal, uv);

		outWorldPos[vertexIndex] = (localToWorld * vec4(position, 1.0)).xyz;
		outPrevWorldPos[vertexIndex] = (localToWorld * vec4(position, 1.0)).xyz;
		outTexCoord[vertexIndex] = uv;
		outWorldNormal[vertexIndex] = normalize(mat3(localToWorld) * normal);

		uint clusterIndex;
		DecodeClusterBatchClusterIndex(batchIndex, clusterIndex);
		outVertexColor[vertexIndex] = RandomColor(clusterIndex);
		// outVertexColor[vertexIndex] = RandomColor(clusterIndex * MAX_CLUSTER_TRIANGLE_NUM + triangleIndex);
		// outVertexColor[vertexIndex] = outWorldNormal;

		gl_MeshVerticesEXT[vertexIndex].gl_Position = worldToClip * localToWorld * vec4(position, 1.0);
	}
#else
	uint laneIndex = threadIndex;
	uint uniqueVertexIndex = 0;
	uvec3 vertexLaneIndices = uvec3(0);
	uint triangleIndex = batchTriangleBegin + laneIndex;

	uint uniqueVertexNum = DeduplicateVertexIndex(batchIndex, batchTriangleNum, laneIndex, triangleIndex, uniqueVertexIndex, vertexLaneIndices);

	if (laneIndex < batchTriangleNum)
	{
		gl_PrimitiveTriangleIndicesEXT[laneIndex] = vertexLaneIndices;
	}

	if (laneIndex < uniqueVertexNum)
	{
		mat4 localToWorld;
		vec3 position;
		vec3 normal;
		vec2 uv;

		uint index = uniqueVertexIndex;
		DecodeClusterBatchDataVertex(index, batchIndex, localToWorld, position, normal, uv);

		outWorldPos[laneIndex] = (localToWorld * vec4(position, 1.0)).xyz;
		outPrevWorldPos[laneIndex] = (localToWorld * vec4(position, 1.0)).xyz;
		outTexCoord[laneIndex] = uv;
		outWorldNormal[laneIndex] = normalize(mat3(localToWorld) * normal);

		uint clusterIndex;
		DecodeClusterBatchClusterIndex(batchIndex, clusterIndex);
		outVertexColor[laneIndex] = RandomColor(clusterIndex);
		// outVertexColor[laneIndex] = RandomColor(clusterIndex * MAX_CLUSTER_TRIANGLE_NUM + triangleIndex);
		// outVertexColor[laneIndex] = outWorldNormal;

		gl_MeshVerticesEXT[laneIndex].gl_Position = worldToClip * localToWorld * vec4(position, 1.0);
	}
#endif

	if (threadIndex == 0)
	{
		SetMeshOutputsEXT(batchVertexNum, batchTriangleNum);
	}
}