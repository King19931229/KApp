#include "vertexinput.h"

#extension GL_NV_mesh_shader : require

// one of them provides uint8_t
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
// #extension GL_NV_gpu_shader5 : enable

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

#if !INSTANCE_INPUT
layout(binding = BINDING_OBJECT)
uniform Object
{
	mat4 model;
	mat4 prev_model;
}object;
#endif

/*
Pack
// x
unsigned  bboxMinX : 8;
unsigned  bboxMinY : 8;
unsigned  bboxMinZ : 8;
unsigned  vertexMax : 8;

// y
unsigned  bboxMaxX : 8;
unsigned  bboxMaxY : 8;
unsigned  bboxMaxZ : 8;
unsigned  primMax : 8;

// z
signed  coneOctX : 8;
signed  coneOctY : 8;
signed  coneAngle : 8;
unsigned  vertexBits : 8;

// w
unsigned  packOffset : 32;
*/
void decodeMeshlet( uvec4 meshletDesc, 
	out uint vertMax, out uint primMax,
	out uint primStart, out uint primDiv,
	out uint vidxStart, out uint vidxBits, out uint vidxDiv)
{
	uint vMax  = (meshletDesc.x >> 24);
	uint packOffset = meshletDesc.w;

	vertMax    = vMax;
	primMax    = (meshletDesc.y >> 24);

	vidxStart  =  packOffset;
	vidxDiv    = (meshletDesc.z >> 24);
	vidxBits   = vidxDiv == 2 ? 16 : 0;

	primDiv    = 4;
	primStart  =  (packOffset + ((vMax + 1 + vidxDiv - 1) / vidxDiv) + 1) & ~1;
}

#define WARP_SIZE  32
#define WARP_STEPS 5

#define GROUP_SIZE WARP_SIZE

#ifndef NVMESHLET_VERTEX_COUNT
// primitive count should be 40, 84 or 126
// vertex count should be 32 or 64
// 64 & 126 is the preferred size
#define NVMESHLET_VERTEX_COUNT      64
#define NVMESHLET_PRIMITIVE_COUNT   126
#endif

#define NVMSH_BARRIER() \
memoryBarrierShared(); \
barrier();

#define NVMSH_INDEX_BITS      8
#define NVMSH_PACKED4X8_GET(packed, idx)   (((packed) >> (NVMSH_INDEX_BITS * (idx))) & 255)

// only for tight packing case, 8 indices are loaded per thread
#define NVMSH_PRIMITIVE_INDICES_RUNS  ((NVMESHLET_PRIMITIVE_COUNT * 3 + GROUP_SIZE * 8 - 1) / (GROUP_SIZE * 8))

// processing loops
#define NVMSH_VERTEX_RUNS     ((NVMESHLET_VERTEX_COUNT + GROUP_SIZE - 1) / GROUP_SIZE)
#define NVMSH_PRIMITIVE_RUNS  ((NVMESHLET_PRIMITIVE_COUNT + GROUP_SIZE - 1) / GROUP_SIZE)

#if 1
#define nvmsh_writePackedPrimitiveIndices4x8NV writePackedPrimitiveIndices4x8NV
#else
#define nvmsh_writePackedPrimitiveIndices4x8NV(idx, topology) {\
	gl_PrimitiveIndicesNV[ (idx) + 0 ] = (NVMSH_PACKED4X8_GET((topology), 0)); \
	gl_PrimitiveIndicesNV[ (idx) + 1 ] = (NVMSH_PACKED4X8_GET((topology), 1)); \
	gl_PrimitiveIndicesNV[ (idx) + 2 ] = (NVMSH_PACKED4X8_GET((topology), 2)); \
	gl_PrimitiveIndicesNV[ (idx) + 3 ] = (NVMSH_PACKED4X8_GET((topology), 3));} 
#endif

layout(local_size_x = GROUP_SIZE) in;
layout(max_vertices = NVMESHLET_VERTEX_COUNT, max_primitives = NVMESHLET_PRIMITIVE_COUNT) out;
layout(triangles) out;

uint meshletID = gl_WorkGroupID.x;
uint laneID = gl_LocalInvocationID.x;
uvec4 geometryOffsets = uvec4(0, 0, 0, 0);

layout(location=0) out Interpolants
{
	flat uint meshletID;
	vec2 uv;
	vec4 worldPos;
	vec4 viewPos;
	vec4 viewNormal;
	vec4 viewLightDir;
#if TANGENT_BINORMAL_INPUT
	vec4 viewTangent;
	vec4 viewBinormal;
#endif
}OUT[];

void getPNT(uint vidx, out vec3 pos, out vec3 normal, out vec2 uv)
{
	const uint stride = 3 + 3 + 2;
	pos = vec3(meshletVertex[vidx * stride + 0], meshletVertex[vidx * stride + 1], meshletVertex[vidx * stride + 2]);
	normal = vec3(meshletVertex[vidx * stride + 3], meshletVertex[vidx * stride + 4], meshletVertex[vidx * stride + 5]);
	uv = vec2(meshletVertex[vidx * stride + 6], meshletVertex[vidx * stride + 7]);
}

#if TANGENT_BINORMAL_INPUT
void getTB(uint vidx, out vec3 tangent, out vec3 binormal)
{
	const uint stride = 3 + 3;
	tangent = vec3(meshletTangentBinormal[vidx * stride + 0], meshletTangentBinormal[vidx * stride + 1], meshletTangentBinormal[vidx * stride + 2]);
	binormal = vec3(meshletTangentBinormal[vidx * stride + 3], meshletTangentBinormal[vidx * stride + 4], meshletTangentBinormal[vidx * stride + 5]);
}
#endif

vec4 procVertex(const uint vert, uint vidx)
{
	vec3 position;
	vec3 normal;
	vec2 uv;

	getPNT(vidx, position, normal, uv);

	mat4 worldMatrix = object.model;
	vec4 worldNormal = worldMatrix * vec4(normal, 0.0);

	OUT[vert].meshletID = meshletID;
	OUT[vert].uv = uv;

#if TANGENT_BINORMAL_INPUT
	vec3 tangent;
	vec3 binormal;

	getTB(vidx, tangent, binormal);

	vec4 worldTangent = worldMatrix * vec4(tangent, 0.0);
	vec4 worldBinormal = worldMatrix * vec4(binormal, 0.0);
	OUT[vert].viewTangent = camera.view * worldTangent;
	OUT[vert].viewBinormal = camera.view * worldBinormal;
#endif

	OUT[vert].worldPos = worldMatrix * vec4(position, 1.0);
	OUT[vert].viewPos = camera.view * OUT[vert].worldPos;

	OUT[vert].viewNormal = camera.view * worldNormal;
	OUT[vert].viewLightDir = camera.view * global.sunLightDir;

	gl_MeshVerticesNV[vert].gl_Position = camera.proj * OUT[vert].viewPos;
#if USE_CLIPPING
	// spir-v annoyance, doesn't unroll the loop and therefore cannot derive the number of clip distances used
	gl_MeshVerticesNV[vert].gl_ClipDistance[0] = dot(scene.wClipPlanes[0], vec4(wPos,1));
	gl_MeshVerticesNV[vert].gl_ClipDistance[1] = dot(scene.wClipPlanes[1], vec4(wPos,1));
	gl_MeshVerticesNV[vert].gl_ClipDistance[2] = dot(scene.wClipPlanes[2], vec4(wPos,1));
#endif

	return gl_MeshVerticesNV[vert].gl_Position;
}

void main()
{
	uvec4 desc = meshletDescs[meshletID + geometryOffsets.x];

	uint vertMax;
	uint primMax;
	uint vidxStart;
	uint vidxBits;
	uint vidxDiv;
	uint primStart;
	uint primDiv;
	decodeMeshlet(desc, vertMax, primMax, primStart, primDiv, vidxStart, vidxBits, vidxDiv);

	vidxStart += geometryOffsets.y / 4;
	primStart += geometryOffsets.y / 4;

	uint primCount = primMax + 1;
	uint vertCount = vertMax + 1;

	for (uint i = 0; i < uint(NVMSH_VERTEX_RUNS); i++) 
	{
		uint vert = laneID + i * GROUP_SIZE;
		uint vertLoad = min(vert, vertMax);

		uint idx   = (vertLoad) / vidxDiv;
		uint shift = (vertLoad) & (vidxDiv-1);

		uint vidx = primIndices1[idx + vidxStart];
		vidx <<= vidxBits * (1-shift); 
		vidx >>= vidxBits;

		vidx += geometryOffsets.w;

		vec4 hPos = procVertex(vert, vidx);
		// setVertexClip(vert, getCullBits(hPos));

	// #if USE_EARLY_ATTRIBUTES
		// 	procAttributes(vert, vidx);
	// #else
		// 	writeVertexIndex(vert, vidx);
	// #endif
	}

	// PRIMITIVE TOPOLOGY  
	{
		uint readBegin = primStart / 2;
		uint readIndex = primCount * 3 - 1;
		uint readMax   = readIndex / 8;

		for (uint i = 0; i < uint(NVMSH_PRIMITIVE_INDICES_RUNS); i++)
		{
			uint read = laneID + i * GROUP_SIZE;
			uint readUsed = min(read, readMax);
			uvec2 topology = primIndices2[readBegin + readUsed];
			nvmsh_writePackedPrimitiveIndices4x8NV(readUsed * 8 + 0, topology.x);
			nvmsh_writePackedPrimitiveIndices4x8NV(readUsed * 8 + 4, topology.y);
		}	
	}

	if (laneID == 0) {
    gl_PrimitiveCountNV = primCount;
	}
}