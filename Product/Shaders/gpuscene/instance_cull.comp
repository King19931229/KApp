#include "gpuscene_define.h"
#include "gpuscene_binding.h"
#include "culling.h"
#include "wave.h"

layout(binding = GPUSCENE_BINDING_OBJECT)
uniform Camera_DYN_UNIFORM
{
	mat4 view;
	mat4 proj;
	mat4 viewProj;
} camera;

layout(local_size_x = GPUSCENE_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint globalIndex = gl_GlobalInvocationID.x;
	uint instanceIndex = globalIndex;

	vec4 boundCenter = InstanceData[instanceIndex].boundCenter;
	vec4 boundHalfExtend = InstanceData[instanceIndex].boundHalfExtend;

	mat4 localToWorld = InstanceData[instanceIndex].transform;
	mat4 worldToClip = camera.viewProj;

	FrustumCullData cullData = BoxCullFrustumGeneral(boundCenter.xyz, boundHalfExtend.xyz, localToWorld, worldToClip, true, false);

	if (cullData.bIsVisible)
	{
		uint visibleInstanceIndex = 0;
		INTERLOCK_ADD(SceneStateData[0].instanceCount, 1, visibleInstanceIndex);

		uint megaShaderIndex = InstanceData[instanceIndex].miscs[2];
		INTERLOCK_ADD_ONLY(MegaShaderState[megaShaderIndex].instanceCount, 1);

		InstanceCullResult[visibleInstanceIndex] = instanceIndex;

		IndrectArgs[0] = atomicMax(IndrectArgs[0], (visibleInstanceIndex + GPUSCENE_GROUP_SIZE) / GPUSCENE_GROUP_SIZE);
	}
}