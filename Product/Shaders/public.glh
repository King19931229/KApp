#ifndef __PUBLIC_HEADER__
#define __PUBLIC_HEADER__

#define POSITION 0
#define NORMAL 1
#define TEXCOORD0 2
#define TEXCOORD1 3

#define DIFFUSE 4
#define SPECULAR 5

#define TANGENT 6
#define BINORMAL 7

#define BLEND_WEIGHTS 8
#define BLEND_INDICES 9

#define GUI_POS 10
#define GUI_UV 11
#define GUI_COLOR 12

#define SCREENQAUD_POS 13

#define INSTANCE_COLUMN_0 14
#define INSTANCE_COLUMN_1 15
#define INSTANCE_COLUMN_2 16
#define INSTANCE_COLUMN_3 17

// Binding
#define BINDING_CAMERA 0
#define BINDING_SHADOW 1
#define BINDING_CASCADED_SHADOW 2

#define BINDING_OBJECT 3
#define BINDING_VERTEX_SHADING 4
#define BINDING_FRAGMENT_SHADING 5

//
// 6 - 7 reserved
//

#define BINDING_TEXTURE0 8
#define BINDING_TEXTURE1 9
#define BINDING_TEXTURE2 10
#define BINDING_TEXTURE3 11
#define BINDING_TEXTURE4 12
#define BINDING_TEXTURE5 13
#define BINDING_TEXTURE6 14
#define BINDING_TEXTURE7 15

#define CUBEMAP_UVW(uvw) vec3(-uvw.x, -uvw.y, -uvw.z)

#extension GL_EXT_scalar_block_layout : enable

layout(binding = BINDING_CAMERA)
uniform CameraInfo
{
    mat4 view;
    mat4 proj;
	mat4 viewInv;
}camera;

layout(binding = BINDING_SHADOW)
uniform ShadowInfo
{
    mat4 light_view;
	mat4 light_proj;
	vec2 near_far;
}shadow;

layout(binding = BINDING_CASCADED_SHADOW)
uniform CascadedShadowInfo
{
	mat4 light_view[4];
	mat4 light_view_proj[4];
	vec4 lightInfo[4];
	vec4 frustum;
	uint cascaded;
}cascaded_shadow;

/*
layout(binding = BINDING_OBJECT)
uniform Object
{
	mat4 model;
}object;
*/

#endif