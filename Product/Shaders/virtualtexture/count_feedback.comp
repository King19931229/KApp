#extension GL_ARB_shader_atomic_counters : require

#ifdef READ_FEEDBACK_FROM_FRAMEBUFFER
layout(binding = VIRTUAL_TEXTURE_BINDING_FEEDBACK_INPUT, rgba8) uniform readonly image2D feedbackInput;
#else
layout(binding = VIRTUAL_TEXTURE_BINDING_FEEDBACK_INPUT) buffer VirtualTextureFeedbackInputBuffer { vec4 VirtualTextureFeedbackInputResult[]; };
#endif

layout (std430, binding = VIRTUAL_TEXTURE_BINDING_FEEDBACK_RESULT) coherent buffer FeedbackResultBuffer
{
	uvec4 FeedbackResult[];
};

layout(std430, binding = VIRTUAL_TEXTURE_BINDING_TEXTURE_DESCRIPTION) buffer VirtualTextureDescriptionBuffer { uvec4 VirtualTextureDescription[]; };

layout(binding = VIRTUAL_TEXTURE_BINDING_CONSTANT)
uniform VirtualTextureConstantInfo
{
	uvec4 description;
	uvec4 description2;
} virtual_texture_constant;

#ifdef READ_FEEDBACK_FROM_FRAMEBUFFER
layout(local_size_x = SQRT_GROUP_SIZE, local_size_y = SQRT_GROUP_SIZE, local_size_z = 1) in;
#else
layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
#endif
void main()
{
#ifdef READ_FEEDBACK_FROM_FRAMEBUFFER
	ivec2 feedback_size = imageSize(feedbackInput);
	if (gl_GlobalInvocationID.x >= feedback_size.x || gl_GlobalInvocationID.y >= feedback_size.y)
		return;
	vec4 data = imageLoad(feedbackInput, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y));
#else
	if (gl_GlobalInvocationID.x >= virtual_texture_constant.description2.y)
		return;
	vec4 data = VirtualTextureFeedbackInputResult[gl_GlobalInvocationID.x];
#endif

	uint pageX = uint(data.x * 255.0 + 0.5);
	uint pageY = uint(data.y * 255.0 + 0.5);
	uint mipLevel = uint(data.z * 255.0 + 0.5);
	uint virtualID = uint(data.w * 255.0 + 0.5);

	if (virtualID != 255)
	{
		uint textureTileNum = VirtualTextureDescription[virtualID].x;
		uint textureTileWriteOffset = VirtualTextureDescription[virtualID].z;

		uint mipWriteOffset = mipLevel * textureTileNum * textureTileNum;
		uint writeIndex = textureTileWriteOffset + mipWriteOffset + pageX + pageY * textureTileNum;
	
		atomicAdd(FeedbackResult[writeIndex / 4][writeIndex & 3], 1);
	}
}