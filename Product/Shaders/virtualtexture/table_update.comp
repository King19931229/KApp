layout (std430, binding = VIRTUAL_TEXTURE_BINDING_UPLOAD_INFO) coherent buffer TableUploadBuffer
{
	uvec4 TableUploadData[];
};

layout(binding = VIRTUAL_TEXTURE_BINDING_OBJECT)
uniform Object_DYN_UNIFORM
{
	// width height updateNum
	uvec4 dimension;
} object;

layout(binding = VIRTUAL_TEXTURE_BINDING_TABLE_IMAGE, rgba8) uniform image2D tableImage;

layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint globalIndex = gl_GlobalInvocationID.x;
	uint updateNum = object.dimension.z;
	uint width = object.dimension.x;

	if (globalIndex < updateNum)
	{
		uint id = TableUploadData[globalIndex].x;
		uint x = id % width;
		uint y = id / width;

		uint data = TableUploadData[globalIndex].y;

		// imageStore(tableImage, ivec2(x, y), vec4(1, 1, 0, 1));
		imageStore(tableImage, ivec2(x, y), vec4(float(data & 0xFF) / 255.0, float((data >> 8) & 0xFF) / 255.0, float((data >> 16) & 0xFF) / 255.0, float((data >> 24 ) & 0xFF) / 255.0));
	}
}