#define COMPUTE_SHADER
#include "volumetric_fog_public.h"
layout(local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = GROUP_SIZE) in;

layout(binding = VOLUMETRIC_FOG_BINDING_VOXEL_CURR) uniform sampler3D currVoxel;
layout(binding = VOLUMETRIC_FOG_BINDING_VOXEL_RESULT, VOXEL_FORMAT) uniform writeonly image3D resultVoxel;

vec4 Accumulate(int z, float n, float f, float grid_size_z, 
				vec3 accum_scattering, float accum_transmittance, vec3 slice_scattering, float slice_density)
{
	const float thickness = SliceThickness(z, n, f, grid_size_z);
	const float slice_transmittance = exp(-slice_density * thickness / (f - n));

	// https://github.com/Unity-Technologies/VolumetricLighting/blob/master/Assets/VolumetricFog/Shaders/Scatter.compute
	vec3 slice_scattering_integral = slice_scattering * (1.0 - slice_transmittance) / slice_density;

	accum_scattering += slice_scattering_integral * accum_transmittance;
	accum_transmittance *= slice_transmittance;

	// vec3 slice_scattering_integral = slice_scattering * (1.0 - slice_transmittance * accum_transmittance) / slice_density;

	// accum_scattering += slice_scattering_integral * thickness / (f - n);
	// accum_transmittance *= slice_transmittance;

	return vec4(accum_scattering, accum_transmittance);
}

void main()
{
	ivec3 voxel_size = imageSize(resultVoxel);
	if (gl_GlobalInvocationID.x >= voxel_size.x || gl_GlobalInvocationID.y >= voxel_size.y)
		return;
	vec3 grid_size = vec3(voxel_size);
	vec4 accum_scattering_transmittance = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	// Accumulate scattering
	for (int z = 0; z < voxel_size.z; z++)
	{
		ivec3 coord = ivec3(gl_GlobalInvocationID.xy, z);
		vec4 slice_scattering_density = texelFetch(currVoxel, coord, 0);
		accum_scattering_transmittance = Accumulate(z, object.nearFarGridZ.x, object.nearFarGridZ.y, grid_size.z,
													accum_scattering_transmittance.rgb, 
													accum_scattering_transmittance.a,
													slice_scattering_density.rgb,
													slice_scattering_density.a);
		imageStore(resultVoxel, coord, accum_scattering_transmittance);
	}
}