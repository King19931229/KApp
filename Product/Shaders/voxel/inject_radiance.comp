#include "public.h"
#include "voxel_common.h"

#extension GL_ARB_shader_image_load_store : require
layout (local_size_x = VOXEL_GROUP_SIZE, local_size_y = VOXEL_GROUP_SIZE, local_size_z = VOXEL_GROUP_SIZE) in;

#ifndef USE_OCTREE
#define USE_OCTREE 0
#endif

#if USE_OCTREE
layout(binding = VOXEL_BINDING_OCTREE) buffer uuOctree { uvec4 uOctree[]; };
#include "octree_common.h"
#include "octree_util.h"
#else
layout(binding = VOXEL_BINDING_ALBEDO) uniform sampler3D voxelAlbedo;
layout(binding = VOXEL_BINDING_NORMAL, rgba8) uniform image3D voxelNormal;
layout(binding = VOXEL_BINDING_EMISSION_MAP, rgba8) uniform readonly image3D voxelEmissive;
layout(binding = VOXEL_BINDING_RADIANCE, rgba8) uniform writeonly image3D voxelRadiance;
#endif

vec3 VoxelToWorld(ivec3 pos)
{
	vec3 result = vec3(pos);
	result *= voxelSize;
	return result + voxel.minpoint_scale.xyz;;
}

vec3 WorldToVoxel(vec3 position)
{
	vec3 voxelPos = position - voxel.minpoint_scale.xyz;
	return voxelPos * voxel.minpoint_scale.w;
}

float TraceShadow(vec3 position, vec3 direction, float maxTracingDistance) 
{
	// scaling factor
	float k = traceShadowHit * traceShadowHit;
	// navigation
	float voxelTexSize = 1.0f / volumeDimension;
	// move one voxel further to avoid self collision
	float dst = voxelTexSize * 2.0f;
	vec3 samplePos = direction * dst + position;
	// control variables
	float visibility = 0.0f;
	// accumulated sample
	float traceSample = 0.0f;

	while (visibility <= 1.0f && dst <= maxTracingDistance) 
	{
		if (samplePos.x < 0.0f || samplePos.y < 0.0f || samplePos.z < 0.0f
			|| samplePos.x > 1.0f || samplePos.y > 1.0f || samplePos.z > 1.0f) 
		{ 
			break; 
		}
	
#if USE_OCTREE
		traceSample = ceil(SampleOctreeColor(volumeDimension, samplePos).a) * k;
#else
		traceSample = ceil(texture(voxelAlbedo, samplePos).a) * k;
#endif

		// hard shadows mode
		if(traceSample > 1.0f - EPSILON) { return 0.0f; }

		// accumulate
		visibility += (1.0f - visibility) * traceSample / dst;
		// move further into volume
		dst += voxelTexSize;
		samplePos = direction * dst + position;
	}

	return max(0.0f, 1.0f - visibility);
}

vec3 BRDF(Light light, vec3 normal, vec3 albedo)
{
	float nDotL = 0.0f;

	if(normalWeightedLambert == 1)
	{
		vec3 weight = normal * normal;
		// calculate directional normal attenuation
		float rDotL = dot(vec3(1.0, 0.0, 0.0), light.direction);
		float uDotL = dot(vec3(0.0, 1.0, 0.0), light.direction);
		float fDotL = dot(vec3(0.0, 0.0, 1.0), light.direction);

		rDotL = normal.x > 0.0 ? max(rDotL, 0.0) : max(-rDotL, 0.0);
		uDotL = normal.y > 0.0 ? max(uDotL, 0.0) : max(-uDotL, 0.0);
		fDotL = normal.z > 0.0 ? max(fDotL, 0.0) : max(-fDotL, 0.0);
		// voxel shading average from all front sides
		nDotL = rDotL * weight.x + uDotL * weight.y + fDotL * weight.z;
	}
	else
	{
		nDotL = max(dot(normal, light.direction), 0.0f);
	}

	return light.diffuse * albedo * nDotL;
}

float Visibility(vec3 position)
{
	/*
	vec4 lsPos = lightViewProjection * vec4(position, 1.0f);
	// avoid arithmetic error
	if(lsPos.w == 0.0f) return 1.0f;
	// transform to ndc-space
	lsPos /= lsPos.w;
	// querry visibility
	vec4 moments = texture(shadowMap, lsPos.xy);
	// move to avoid acne
	vec2 wDepth = WarpDepth(lsPos.z - 0.0001f);
	// derivative of warping at depth
	vec2 depthScale = 0.0001f * exponents * wDepth;
	vec2 minVariance = depthScale * depthScale;
	// evsm mode 4 compares negative and positive
	float positive = Chebyshev(moments.xz, wDepth.x, minVariance.x);
	float negative = Chebyshev(moments.yw, wDepth.y, minVariance.y);
	// shadowing value
	return min(positive, negative);
	*/
	return 0.0;
}

vec4 CalculateDirectional(Light light, vec3 normal, vec3 position, vec3 albedo)
{
	float visibility = 1.0f;

	if(light.shadowingMethod == 1)
	{
		visibility = Visibility(position);
	}
	else if(light.shadowingMethod == 2)
	{
		vec3 voxelPos = WorldToVoxel(position);
		visibility = TraceShadow(voxelPos, light.direction, 1.0f);
	}

	if(visibility <= 0.0f) return vec4(0.0f); 

	return vec4(BRDF(light, normal, albedo) * visibility, visibility);
}

vec4 CalculatePoint(Light light, vec3 normal, vec3 position, vec3 albedo)
{
	light.direction = light.position - position;
	float d = length(light.direction);
	light.direction = normalize(light.direction);
	float falloff = 1.0f / (light.attenuation.constant + light.attenuation.linear * d
					+ light.attenuation.quadratic * d * d + 1.0f);

	if(falloff <= 0.0f) return vec4(0.0f);

	float visibility = 1.0f;

	if(light.shadowingMethod == 2)
	{
		vec3 voxelPos = WorldToVoxel(position);
		vec3 lightPosT = WorldToVoxel(light.position);

		vec3 lightDirT = lightPosT.xyz - voxelPos.xyz;
		float dT = length(lightDirT);
		lightDirT = normalize(lightDirT);

		visibility = TraceShadow(voxelPos, lightDirT, dT);
	}

	if(visibility <= 0.0f) return vec4(0.0f); 

	return vec4(BRDF(light, normal, albedo) * falloff * visibility, visibility);
}

vec4 CalculateSpot(Light light, vec3 normal, vec3 position, vec3 albedo)
{
	vec3 spotDirection = light.direction;
	light.direction = normalize(light.position - position);
	float cosAngle = dot(-light.direction, spotDirection);

	// outside the cone
	if(cosAngle < light.angleOuterCone) { return vec4(0.0f); }

	// assuming they are passed as cos(angle)
	float innerMinusOuter = light.angleInnerCone - light.angleOuterCone;
	// spot light factor for smooth transition
	float spotMark = (cosAngle - light.angleOuterCone) / innerMinusOuter;
	float spotFalloff = smoothstep(0.0f, 1.0f, spotMark);

	if(spotFalloff <= 0.0f) return vec4(0.0f);   

	float dst = distance(light.position, position);
	float falloff = 1.0f / (light.attenuation.constant + light.attenuation.linear * dst
					+ light.attenuation.quadratic * dst * dst + 1.0f);   

	if(falloff <= 0.0f) return vec4(0.0f);

	float visibility = 1.0f;

	if(light.shadowingMethod == 2)
	{
		vec3 voxelPos = WorldToVoxel(position);
		vec3 lightPosT = WorldToVoxel(light.position);

		vec3 lightDirT = lightPosT.xyz - voxelPos.xyz;
		float dT = length(lightDirT);
		lightDirT = normalize(lightDirT);

		visibility = TraceShadow(voxelPos, lightDirT, dT);
	}

	if(visibility <= 0.0f) return vec4(0.0f);

	return vec4(BRDF(light, normal, albedo) * falloff * spotFalloff * visibility, visibility);
}

vec4 CalculateDirectLighting(vec3 position, vec3 normal, vec3 albedo)
{
	normal = normalize(normal);
	// world space grid voxel size
	float voxelWorldSize = 1.0 / (voxel.minpoint_scale.w * volumeDimension);
	// calculate directional lighting
	vec4 directLighting = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec4 current =  vec4(0.0f);
	int count = 0;
	// move position forward to avoid shadowing errors
	position = position + normal * voxelWorldSize * 0.5f;

	// calculate lighting for sun light
	{
		Light sunLight;
		sunLight.diffuse = vec3(1.0f);
		sunLight.ambient = vec3(0.001f);
		sunLight.specular = vec3(0.0f);
		sunLight.direction = voxel.sunlight.xyz;
		sunLight.shadowingMethod = 2;
		directLighting = CalculateDirectional(sunLight, normal, position, albedo);
		++count;
	}

#if 0
	// calculate lighting for directional lights
	for(int i = 0; i < lightTypeCount[0]; ++i)
	{
		current = CalculateDirectional(directionalLight[i], normal, position, albedo);
		directLighting.rgb += current.rgb;
		directLighting.a += current.a; count++;
	}

	// calculate lighting for point lights
	for(int i = 0; i < lightTypeCount[1]; ++i)
	{
		current = CalculatePoint(pointLight[i], normal, position, albedo);
		directLighting.rgb += current.rgb;
		directLighting.a += current.a; count++;
	}

	// calculate lighting for spot lights
	for(int i = 0; i < lightTypeCount[2]; ++i) 
	{
		current = CalculateSpot(spotLight[i], normal, position, albedo);
		directLighting.rgb += current.rgb;
		directLighting.a += current.a; count++;
	}
#endif

	if(count > 0) { directLighting.a /= count; }

	return directLighting;
}

void main()
{
	if(gl_GlobalInvocationID.x >= volumeDimension ||
		gl_GlobalInvocationID.y >= volumeDimension ||
		gl_GlobalInvocationID.z >= volumeDimension) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);

	// voxel color
#if USE_OCTREE
	vec3 octreePos = (vec3(writePos) + vec3(0.5)) / volumeDimension;
	vec4 albedo = SampleOctreeColor(volumeDimension, octreePos);
	// uint idx;
	// GetOctreeIndex(uvec3(writePos), uint(volumeDimension), idx);
	// vec4 unpacked = unpackUnorm4x8(uOctree[idx][OCTREE_COLOR_INDEX]);
	// albedo = unpacked;
#else
	vec4 albedo = texelFetch(voxelAlbedo, writePos, 0);
#endif

	if(albedo.a < EPSILON) { return; }
	albedo.a = 0.0f;

	// voxel normal in 0-1 range
#if USE_OCTREE
	vec3 baseNormal = SampleOctreeNormal(volumeDimension, octreePos).xyz;
#else
	vec3 baseNormal = imageLoad(voxelNormal, writePos).xyz;
#endif
	// normal is stored in 0-1 range, restore to -1-1
	vec3 normal = DecodeNormal(baseNormal);

	// emission from voxel
#if USE_OCTREE
	vec3 emissive = SampleOctreeEmssive(volumeDimension, octreePos).rgb;
#else
	vec3 emissive = imageLoad(voxelEmissive, writePos).rgb;
#endif

	// black voxel has no irradiance diffuse
	if(any(greaterThan(albedo.rgb, vec3(0.0f))))
	{
		// obtain world-space position of the current voxel
		vec3 wsPosition = VoxelToWorld(writePos);
		// calculate direct lighting onto voxel
		albedo = CalculateDirectLighting(wsPosition, normal, albedo.rgb);
	}

#if USE_OCTREE
	// can query visibility in octree
#else
	// store visibility in normal alpha
	imageStore(voxelNormal, writePos, vec4(baseNormal, albedo.a));
#endif

	// add emission
	albedo.rgb += emissive;
	albedo.a = 1.0f;
#if USE_OCTREE
	StoreOctreeRadiance(volumeDimension, writePos, albedo.rgb);
#else
	imageStore(voxelRadiance, writePos, albedo);
#endif
}