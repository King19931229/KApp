#include "public.h"
#include "voxel/clipmap/voxel_clipmap_common.h"

layout (local_size_x = VOXEL_CLIPMAP_GROUP_SIZE, local_size_y = VOXEL_CLIPMAP_GROUP_SIZE, local_size_z = VOXEL_CLIPMAP_GROUP_SIZE) in;

layout(binding = VOXEL_CLIPMAP_BINDING_STATIC_FLAG, r8) uniform writeonly image3D staticVoxelFlag;
layout(binding = VOXEL_CLIPMAP_BINDING_ALBEDO, rgba8) uniform writeonly image3D voxelAlbedo;
layout(binding = VOXEL_CLIPMAP_BINDING_NORMAL, rgba8) uniform writeonly image3D voxelNormal;
layout(binding = VOXEL_CLIPMAP_BINDING_EMISSION, rgba8) uniform writeonly image3D voxelEmissive;

layout(binding = BINDING_OBJECT)
uniform Object
{
	ivec4 regionMin;
	ivec4 regionMax;
	ivec4 params;
} object;

void main()
{
	ivec3 regionArea = object.regionMax.xyz - object.regionMin.xyz;

	if (any(greaterThanEqual(gl_GlobalInvocationID.xyz, regionArea.xyz)))
		return;

	int level = object.params[0];
	int resolution = object.params[1];

	ivec3 writePos = ClipCoordToImageCoord(ivec3(gl_GlobalInvocationID), resolution);

	writePos += ivec3(borderSize);
	// Target the correct clipmap level
	writePos.y += int((volumeDimension + 2 * borderSize) * level);

	// clear the volumnes with 0,0,0,0
	imageStore(voxelAlbedo, writePos, vec4(0));
	imageStore(voxelNormal, writePos, vec4(0));
	imageStore(voxelEmissive, writePos, vec4(0));
	imageStore(staticVoxelFlag, writePos, vec4(0.0));
}