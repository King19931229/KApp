#include "public.h"
#include "voxel/clipmap/voxel_clipmap_common.h"

#extension GL_ARB_shader_image_load_store : require
layout (local_size_x = VOXEL_CLIPMAP_GROUP_SIZE, local_size_y = VOXEL_CLIPMAP_GROUP_SIZE, local_size_z = VOXEL_CLIPMAP_GROUP_SIZE) in;

layout(binding = VOXEL_CLIPMAP_BINDING_ALBEDO) uniform sampler3D voxelAlbedo;
layout(binding = VOXEL_CLIPMAP_BINDING_NORMAL, rgba8) uniform image3D voxelNormal;
layout(binding = VOXEL_CLIPMAP_BINDING_EMISSION_MAP, rgba8) uniform readonly image3D voxelEmissive;
layout(binding = VOXEL_CLIPMAP_BINDING_RADIANCE, rgba8) uniform image3D voxelRadiance;
layout(binding = VOXEL_CLIPMAP_BINDING_VISIBILITY, rgba8) uniform image3D voxelVisibility;

// TODO traceShadowHit
float traceShadowHit = 1.0f;

layout(binding = BINDING_OBJECT)
uniform Object
{
	// level:[0] levelCount:[1]
	uvec4 params;
} object;

uint level = object.params[0];
uint levelCount = object.params[1];

vec3 regionMin = voxel_clipmap.region_min_and_voxelsize[level].xyz;
vec3 regionMax = voxel_clipmap.region_max_and_extent[level].xyz;
float voxelSize = voxel_clipmap.region_min_and_voxelsize[level].w;
float extent = voxel_clipmap.region_max_and_extent[level].w;

vec3 VoxelToWorld(vec3 pos)
{
	vec3 result = vec3(pos);
	result *= voxelSize;
	return result;
}

vec3 WorldToVoxel(vec3 position)
{
	vec3 voxelPos = position / voxelSize;
	return voxelPos;
}

float TraceShadow(vec3 position, vec3 direction, float maxTracingDistance)
{
	// scaling factor
	float k = traceShadowHit * traceShadowHit;
	// move one voxel further to avoid self collision
	float dst = 2.0 * voxelSize;
	vec3 pos = direction * dst + position;
	// control variables
	float visibility = 0.0f;
	// accumulated sample
	float traceSample = 0.0f;

	float c = voxelSize * 0.5; // Error correction constant
	vec3 correctedRegionMin = regionMin + c;
	vec3 correctedRegionMax = regionMax - c;

	while (visibility < 1.0f && dst <= maxTracingDistance * extent)
	{
		if (pos.x < correctedRegionMin.x || pos.y < correctedRegionMin.y || pos.z < correctedRegionMin.z
			|| pos.x >= correctedRegionMax.x || pos.y >= correctedRegionMax.y || pos.z >= correctedRegionMax.z)
		{
			visibility = 0.0; 
			break; 
		}

		vec3 samplePos = WorldPositionToSampleCoord(pos, extent, level, levelCount, 0, 1);
		traceSample = ceil(texture(voxelAlbedo, samplePos).a) * k;

		// hard shadows mode
		if(traceSample > 1.0f - EPSILON) { return 0.0f; }

		// accumulate
		visibility += (1.0f - visibility) * traceSample * extent / dst;
		// move further into volume
		dst += voxelSize;
		pos = direction * dst + position;
	}

	return max(0.0f, 1.0f - visibility);
}

vec3 BRDF(Light light, vec3 normal, vec3 albedo)
{
	float nDotL = 0.0f;

	if(normalWeightedLambert == 1)
	{
		vec3 weight = normal * normal;
		// calculate directional normal attenuation
		float rDotL = dot(vec3(1.0, 0.0, 0.0), light.direction);
		float uDotL = dot(vec3(0.0, 1.0, 0.0), light.direction);
		float fDotL = dot(vec3(0.0, 0.0, 1.0), light.direction);

		rDotL = normal.x > 0.0 ? max(rDotL, 0.0) : max(-rDotL, 0.0);
		uDotL = normal.y > 0.0 ? max(uDotL, 0.0) : max(-uDotL, 0.0);
		fDotL = normal.z > 0.0 ? max(fDotL, 0.0) : max(-fDotL, 0.0);
		// voxel shading average from all front sides
		nDotL = rDotL * weight.x + uDotL * weight.y + fDotL * weight.z;
	}
	else
	{
		nDotL = max(dot(normal, light.direction), 0.0f);
	}

	return light.diffuse * albedo * nDotL;
}

float Visibility(vec3 position)
{
	return 0.0;
}

vec4 CalculateDirectional(Light light, vec3 normal, vec3 position, vec3 albedo)
{
	float visibility = 1.0f;

	if(light.shadowingMethod == 1)
	{
		visibility = Visibility(position);
	}
	else if(light.shadowingMethod == 2)
	{
		visibility = TraceShadow(position, light.direction, 1.0);
	}

	if(visibility <= 0.0f) return vec4(0.0f); 

	return vec4(BRDF(light, normal, albedo) * visibility, visibility);
}

vec4 CalculatePoint(Light light, vec3 normal, vec3 position, vec3 albedo)
{
	light.direction = light.position - position;
	float d = length(light.direction);
	light.direction = normalize(light.direction);
	float falloff = 1.0f / (light.attenuation.constant + light.attenuation.linear * d
					+ light.attenuation.quadratic * d * d + 1.0f);

	if(falloff <= 0.0f) return vec4(0.0f);

	float visibility = 1.0f;

	if(light.shadowingMethod == 2)
	{
		vec3 voxelPos = WorldToVoxel(position);
		vec3 lightPosT = WorldToVoxel(light.position);

		vec3 lightDirT = lightPosT.xyz - voxelPos.xyz;
		float dT = length(lightDirT);
		lightDirT = normalize(lightDirT);

		visibility = TraceShadow(position, lightDirT, dT);
	}

	if(visibility <= 0.0f) return vec4(0.0f); 

	return vec4(BRDF(light, normal, albedo) * falloff * visibility, visibility);
}

vec4 CalculateSpot(Light light, vec3 normal, vec3 position, vec3 albedo)
{
	vec3 spotDirection = light.direction;
	light.direction = normalize(light.position - position);
	float cosAngle = dot(-light.direction, spotDirection);

	// outside the cone
	if(cosAngle < light.angleOuterCone) { return vec4(0.0f); }

	// assuming they are passed as cos(angle)
	float innerMinusOuter = light.angleInnerCone - light.angleOuterCone;
	// spot light factor for smooth transition
	float spotMark = (cosAngle - light.angleOuterCone) / innerMinusOuter;
	float spotFalloff = smoothstep(0.0f, 1.0f, spotMark);

	if(spotFalloff <= 0.0f) return vec4(0.0f);   

	float dst = distance(light.position, position);
	float falloff = 1.0f / (light.attenuation.constant + light.attenuation.linear * dst
					+ light.attenuation.quadratic * dst * dst + 1.0f);   

	if(falloff <= 0.0f) return vec4(0.0f);

	float visibility = 1.0f;

	if(light.shadowingMethod == 2)
	{
		vec3 voxelPos = WorldToVoxel(position);
		vec3 lightPosT = WorldToVoxel(light.position);

		vec3 lightDirT = lightPosT.xyz - voxelPos.xyz;
		float dT = length(lightDirT);
		lightDirT = normalize(lightDirT);

		visibility = TraceShadow(position, lightDirT, dT);
	}

	if(visibility <= 0.0f) return vec4(0.0f);

	return vec4(BRDF(light, normal, albedo) * falloff * spotFalloff * visibility, visibility);
}

vec4 CalculateDirectLighting(vec3 position, vec3 normal, vec3 albedo)
{
	normal = normalize(normal);
	// calculate directional lighting
	vec4 directLighting = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec4 current =  vec4(0.0f);
	int count = 0;
	// move position forward to avoid shadowing errors
	position = position + normal * voxelSize * 0.5f;

	// calculate lighting for sun light
	{
		Light sunLight;
		sunLight.diffuse = vec3(1.0f);
		sunLight.ambient = vec3(0.001f);
		sunLight.specular = vec3(0.0f);
		sunLight.direction = -global.sunLightDir.xyz;
		sunLight.shadowingMethod = 2;
		directLighting = CalculateDirectional(sunLight, normal, position, albedo);
		++count;
	}

#if 0
	// calculate lighting for directional lights
	for(int i = 0; i < lightTypeCount[0]; ++i)
	{
		current = CalculateDirectional(directionalLight[i], normal, position, albedo);
		directLighting.rgb += current.rgb;
		directLighting.a += current.a; count++;
	}

	// calculate lighting for point lights
	for(int i = 0; i < lightTypeCount[1]; ++i)
	{
		current = CalculatePoint(pointLight[i], normal, position, albedo);
		directLighting.rgb += current.rgb;
		directLighting.a += current.a; count++;
	}

	// calculate lighting for spot lights
	for(int i = 0; i < lightTypeCount[2]; ++i) 
	{
		current = CalculateSpot(spotLight[i], normal, position, albedo);
		directLighting.rgb += current.rgb;
		directLighting.a += current.a; count++;
	}
#endif

	if(count > 0) { directLighting.a /= count; }

	return directLighting;
}

void main()
{
	if(gl_GlobalInvocationID.x >= volumeDimension ||
		gl_GlobalInvocationID.y >= volumeDimension ||
		gl_GlobalInvocationID.z >= volumeDimension) return;

	vec3 position = vec3(gl_GlobalInvocationID);
	position += regionMin / voxelSize;

	ivec3 writePos = ClipCoordToImageCoord(ivec3(position), volumeDimension);

	// Target the correct clipmap level
	writePos += ivec3(borderSize);
	writePos.y += int((volumeDimension + 2 * borderSize) * level);

	vec4 albedo = texelFetch(voxelAlbedo, writePos, 0);

	if(albedo.a < EPSILON) { return; }

	// voxel normal in 0-1 range
	vec3 baseNormal = imageLoad(voxelNormal, writePos).xyz;
	// normal is stored in 0-1 range, restore to -1-1
	vec3 normal = DecodeNormal(baseNormal);

	// emission from voxel
	vec3 emissive = imageLoad(voxelEmissive, writePos).rgb;

	// black voxel has no irradiance diffuse
	if(any(greaterThan(albedo.rgb, vec3(0.0f))))
	{
		// obtain world-space position of the current voxel
		vec3 wsPosition = VoxelToWorld(position + vec3(0.5));
		// calculate direct lighting onto voxel
		albedo = CalculateDirectLighting(wsPosition, normal, albedo.rgb);
	}

	// add emission
	albedo.rgb += emissive;

	for (uint face = 0; face < 6; ++face)
	{
		ivec3 faceWritePos = writePos + GetFaceOffset(face);
		float visibility = imageLoad(voxelVisibility, faceWritePos).a;
		// resotre the visibility
		albedo.a = visibility;
		imageStore(voxelRadiance, faceWritePos, albedo);
	}
}