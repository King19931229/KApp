#include "octree_common.h"

layout(local_size_x = OCTREE_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(binding = OCTREE_BINDING_OCTREE) buffer uuOctree { uint uOctree[]; };
layout(binding = OCTREE_BINDING_OCTREE_DATA) buffer uuOctreeData { uvec4 uOctreeData[]; };
layout(binding = OCTREE_BINDING_FRAGMENTLIST) readonly buffer uuFragmentList { uvec4 uFragmentList[]; };

#include "octree_util.h"

layout(binding = OCTREE_BINDING_OBJECT)
uniform Object
{
	uint uFragmentNum;
	uint uVoxelResolution;
};

uvec4 LeafToUvec4(uint val)
{
	return uvec4((val & 0xffu), ((val >> 8u) & 0xffu), ((val >> 16u) & 0xffu), ((val >> 24u) & 0x3fu));
}

uint Uvec4ToLeaf(uvec4 vec)
{
	return (min(vec.w, 0x3fu) << 24u) | (vec.x & 0xffu) | ((vec.y & 0xffu) << 8u) | ((vec.z & 0xffu) << 16u) |
		0xC0000000u;
}

void main()
{
	if (gl_GlobalInvocationID.x >= uFragmentNum)
		return;
	uvec4 ufragment = uFragmentList[gl_GlobalInvocationID.x];

	uint level_dim = uVoxelResolution;
	uvec3 level_pos = uvec3(ufragment.x & 0xfffu, (ufragment.x >> 12u) & 0xfffu, (ufragment.x >> 24u) | ((ufragment.y >> 28u) << 8u));

	uint idx = 0u;
	bool leaf = GetOctreeIndex(level_pos, level_dim, idx);

	uOctree[idx] |= 0x80000000u;
}