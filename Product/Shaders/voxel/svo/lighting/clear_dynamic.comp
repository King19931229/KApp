#include "public.h"
#include "voxel/svo/voxel_common.h"

layout (local_size_x = VOXEL_GROUP_SIZE, local_size_y = VOXEL_GROUP_SIZE, local_size_z = VOXEL_GROUP_SIZE) in;

layout(binding = VOXEL_BINDING_ALBEDO, rgba8) uniform image3D voxelAlbedo;
layout(binding = VOXEL_BINDING_NORMAL, rgba8) uniform writeonly image3D voxelNormal;
layout(binding = VOXEL_BINDING_EMISSION, rgba8) uniform writeonly image3D voxelEmissive;
layout(binding = VOXEL_BINDING_STATIC_FLAG, r8) uniform image3D staticVoxelFlag;

void main()
{
	int volumeDimension = imageSize(voxelAlbedo).x;

	if(gl_GlobalInvocationID.x >= volumeDimension ||
		gl_GlobalInvocationID.y >= volumeDimension ||
		gl_GlobalInvocationID.z >= volumeDimension) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);

	// empty voxel
	// if(imageLoad(voxelAlbedo, writePos).a < EPSILON) { return; }

	// static flag is true
	// if(imageLoad(staticVoxelFlag, writePos, 0).r > EPSILON) { return; }

	// is a non-static voxel and the voxel in that position isn't empty
	// clear the volumnes with 0,0,0,0
	imageStore(voxelAlbedo, writePos, vec4(0.0));
	imageStore(voxelNormal, writePos, vec4(0.0));
	imageStore(voxelEmissive, writePos, vec4(0.0));
	imageStore(staticVoxelFlag, writePos, vec4(0.0));
}