#include "octree_common.h"

layout(local_size_x = OCTREE_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(binding = OCTREE_BINDING_OCTREE) buffer uuOctree { uint uOctree[]; };
layout(binding = OCTREE_BINDING_OCTREE_DATA) buffer uuOctreeData { uvec4 uOctreeData[]; };
layout(binding = OCTREE_BINDING_OCTREE_MIPMAP_DATA) buffer uuOctreeMipmapData { uint uOctreeMipmapData[][6]; };
layout(binding = OCTREE_BINDING_FRAGMENTLIST) readonly buffer uuFragmentList { uvec4 uFragmentList[]; };

#include "octree_util.h"

layout(binding = OCTREE_BINDING_OBJECT)
uniform Object_DYN_UNIFORM
{
	uint uFragmentNum;
	uint uVoxelResolution;
};

uvec4 LeafToUvec4(uint val)
{
	return uvec4((val & 0xffu), ((val >> 8u) & 0xffu), ((val >> 16u) & 0xffu), ((val >> 24u) & 0x3fu));
}

uint Uvec4ToLeaf(uvec4 vec)
{
	return (min(vec.w, 0x3fu) << 24u) | (vec.x & 0xffu) | ((vec.y & 0xffu) << 8u) | ((vec.z & 0xffu) << 16u) |
		0xC0000000u;
}

void main()
{
	if (gl_GlobalInvocationID.x >= uFragmentNum)
		return;
	uvec4 ufragment = uFragmentList[gl_GlobalInvocationID.x];

	uint level_dim = uVoxelResolution;
	uvec3 level_pos = uvec3(ufragment.x & 0xfffu, (ufragment.x >> 12u) & 0xfffu, (ufragment.x >> 24u) | ((ufragment.y >> 28u) << 8u));

	uint idx = 0u;
	if (GetOctreeDataIndex(level_pos, level_dim, idx))
	{
		// uOctreeData[idx][OCTREE_COLOR_INDEX] = 0xC0000000u | (ufragment.y & 0xffffffu); //termination
		// tag and color data

		// atomic moving average
		uint prev_val, cur_val, new_val;
		uvec4 rgba;
		uint numIterations;

		// C1(11,000001 [2:6][leaf_label:count])
#define OCTREE_ATOMIC_WRITE_VALUE(index, new_value)\
		prev_val = 0;\
		new_val = 0xC1000000u | (new_value & 0xffffffu);\
		rgba = LeafToUvec4(new_val);\
		numIterations = 0;\
		while ((cur_val = atomicCompSwap(uOctreeData[idx][index], prev_val, new_val)) != prev_val && numIterations < 255)\
		{\
			prev_val = cur_val;\
			uvec4 prev_rgba = LeafToUvec4(prev_val);\
			prev_rgba.xyz *= prev_rgba.w;\
			uvec4 cur_rgba = prev_rgba + rgba;\
			cur_rgba.xyz /= cur_rgba.w;\
			new_val = Uvec4ToLeaf(cur_rgba);\
			++numIterations;\
		}

		OCTREE_ATOMIC_WRITE_VALUE(OCTREE_COLOR_INDEX, ufragment.y);
		OCTREE_ATOMIC_WRITE_VALUE(OCTREE_NORMAL_INDEX, ufragment.z);
		OCTREE_ATOMIC_WRITE_VALUE(OCTREE_EMISSIVE_INDEX, ufragment.w);
		OCTREE_ATOMIC_WRITE_VALUE(OCTREE_RADIANCE_INDEX, 0);
#undef OCTREE_ATOMIC_WRITE_VALUE
	}
}