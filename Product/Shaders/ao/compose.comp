#include "rtao_define.h"

layout(binding = BINDING_CAMERA)
uniform CameraInfo
{
	mat4 view;
	mat4 proj;
	mat4 viewInv;
	mat4 projInv;
	mat4 viewProj;
	mat4 prevViewProj;
	// near, far, fov, aspect
	vec4 parameters;
	vec4 frustumPlanes[6];
} camera;

#include "shading/gbuffer.h"

layout(binding = BINDING_UNIFORM) uniform AOProperties 
{
	float rtao_radius;
	int   rtao_samples;
	float rtao_power;
	int   rtao_distance_based;
	int   frame_number;
	int   enable_checkboard;
};

layout(binding = BINDING_CUR_AO, r16f) uniform image2D curAOImage;
layout(binding = BINDING_CUR_HITDISTANCE, r16f) uniform image2D curHitDistanceImage;
layout(binding = BINDING_GBUFFER_RT0, GBUFFER_IMAGE0_FORMAT) uniform image2D gbuffer0Image;
layout(binding = BINDING_GBUFFER_RT1, GBUFFER_IMAGE1_FORMAT) uniform image2D gbuffer1Image;
layout(binding = BINDING_PREV_NORMAL_DEPTH, rgba16f) uniform image2D prevNormalDepthImage;
layout(binding = BINDING_CUR_NORMAL_DEPTH, rgba16f) uniform image2D curNormalDepthImage;
layout(binding = BINDING_REPROJECTED, rgba16f) uniform image2D reprojectedImage;
layout(binding = BINDING_COMPOSED, AO_IMAGE_FORMAT) uniform image2D composedImage;

layout(local_size_x = RTAO_GROUP_SIZE, local_size_y = RTAO_GROUP_SIZE) in;

vec4 SampleResult(vec2 p, ivec2 size)
{
	const ivec2 offsets[4] = { {0, 0}, {1, 0}, {0, 1}, {1, 1} };
	ivec2 topLeft = ivec2(floor(p));

	ivec2 samplePos[4];
	for(int i = 0; i < 4; ++i)
	{
		samplePos[i] = topLeft + offsets[i];
	}

	vec2 targetOffset = p - vec2(topLeft);

	vec4 weights;
	ComputeBilinearWeights(targetOffset, size, samplePos, weights);
	weights /= dot(vec4(1.0), weights);

	vec4 result = vec4(0);
	for(int i = 0; i < 4; ++i)
	{
		result += imageLoad(curAOImage, samplePos[i]) * weights[i];
	}
	return result;
}

void main()
{
	ivec2 inSize = imageSize(curAOImage);
	ivec2 outSize = imageSize(composedImage);
	// Check if not outside boundaries
	if(gl_GlobalInvocationID.x >= outSize.x || gl_GlobalInvocationID.y >= outSize.y) return;
	vec2 texPos = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5)) / vec2(outSize);
	vec4 result = SampleResult(texPos * vec2(inSize) - vec2(0.5), inSize);
	float ao = result.r;
	ao = pow(ao, rtao_power);
	imageStore(composedImage, ivec2(gl_GlobalInvocationID.xy), vec4(ao));
	//imageStore(composedImage, ivec2(gl_GlobalInvocationID.xy), imageLoad(curAOImage, ivec2(gl_GlobalInvocationID.xy)).rrrr);
}