#include "rtao_define.h"

layout(binding = BINDING_CAMERA)
uniform CameraInfo
{
	mat4 view;
	mat4 proj;
	mat4 viewInv;
	mat4 projInv;
	mat4 viewProj;
	mat4 prevViewProj;
	// near, far, fov, aspect
	vec4 parameters;
	vec4 frustumPlanes[6];
} camera;

#include "shading/gbuffer.h"

layout(binding = BINDING_UNIFORM) uniform AOProperties 
{
	float rtao_radius;
	int   rtao_samples;
	float rtao_power;
	int   rtao_distance_based;
	int   frame_number;
	int	  enable_checkboard;
};

layout(binding = BINDING_CUR_AO, r16f) uniform image2D curAOImage;
layout(binding = BINDING_CUR_HITDISTANCE, r16f) uniform image2D curHitDistanceImage;
layout(binding = BINDING_GBUFFER_RT0, GBUFFER_IMAGE0_FORMAT) uniform image2D gbuffer0Image;
layout(binding = BINDING_GBUFFER_RT1, GBUFFER_IMAGE1_FORMAT) uniform image2D gbuffer1Image;
layout(binding = BINDING_PREV_NORMAL_DEPTH, rgba16f) uniform image2D prevNormalDepthImage;
layout(binding = BINDING_CUR_NORMAL_DEPTH, rgba16f) uniform image2D curNormalDepthImage;
layout(binding = BINDING_REPROJECTED, rgba16f) uniform image2D reprojectedImage;
layout(binding = BINDING_COMPOSED, rgba8) uniform image2D composedImage;

layout(local_size_x = RTAO_GROUP_SIZE, local_size_y = RTAO_GROUP_SIZE) in;

void main()
{
	ivec2 size = imageSize(composedImage);
	// Check if not outside boundaries
	if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;
	float ao = imageLoad(curAOImage, ivec2(gl_GlobalInvocationID.xy)).r;
	ao = pow(ao, rtao_power);
	imageStore(composedImage, ivec2(gl_GlobalInvocationID.xy), vec4(ao));
}