#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

#include "sampling.h"
#include "rtao_define.h"

layout(binding = BINDING_AS) uniform accelerationStructureEXT topLevelAS;

layout(binding = BINDING_UNIFORM) uniform AOProperties 
{
	float rtao_radius;
	int   rtao_samples;
	float rtao_power;
	int   rtao_distance_based;
	int   frame_number;
	int	  enable_checkboard;
};

layout(binding = BINDING_CUR_AO, r16f) uniform image2D outAOImage;
layout(binding = BINDING_CUR_HITDISTANCE, r16f) uniform image2D outHitDistanceImage;
layout(binding = BINDING_LOCAL_MEAN_VARIANCE_OUTPUT, rg16f) uniform image2D meanOutputImage;
layout(binding = BINDING_CUR_NORMAL_DEPTH, rgba16f) uniform image2D curNormalDepthImage;

layout(binding = BINDING_CAMERA)
uniform CameraInfo
{
	mat4 view;
	mat4 proj;
	mat4 viewInv;
	mat4 projInv;
	mat4 viewProj;
	mat4 prevViewProj;
	// near, far, fov, aspect
	vec4 parameters;
	vec4 frustumPlanes[6];
} camera;

#include "shading/gbuffer.h"

layout(binding = BINDING_GBUFFER_RT0, GBUFFER_IMAGE0_FORMAT) uniform image2D gbuffer0Image;
layout(binding = BINDING_GBUFFER_RT1, GBUFFER_IMAGE1_FORMAT) uniform image2D gbuffer1Image;

//----------------------------------------------------------------------------
// Tracing a ray and returning the weight based on the distance of the hit
//
float TraceRay(in rayQueryEXT rayQuery, in vec3 origin, in vec3 direction, in out float dis)
{
	uint flags = gl_RayFlagsNoneEXT;
	if(rtao_distance_based == 0)
		flags = gl_RayFlagsTerminateOnFirstHitEXT;

	rayQueryInitializeEXT(rayQuery, topLevelAS, flags, 0xFF, origin, 0.0f, direction, rtao_radius);

	// Start traversal: return false if traversal is complete
	while(rayQueryProceedEXT(rayQuery))
	{
	}

	dis = rtao_radius + 0.001;

	// Returns type of committed (true) intersection
	if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
	{
		dis = rayQueryGetIntersectionTEXT(rayQuery, true);
		// Got an intersection == Shadow
		if(rtao_distance_based == 0)
			return 1;
		else
			return 1 - (dis / rtao_radius);
	}

	return 0;
}

void ComputeValues(vec2 p, in out vec4 normalDepth, in out vec3 origin)
{
	const ivec2 offsets[4] = { {0, 0}, {1, 0}, {0, 1}, {1, 1} };
	ivec2 topLeft = ivec2(floor(p));
	ivec2 closest = ivec2(round(p));

	ivec2 samplePos[4];
	for(int i = 0; i < 4; ++i)
	{
		samplePos[i] = topLeft + offsets[i];
	}

	vec4 sampleNormalDepth[4];
	for(int i = 0; i < 4; ++i)
	{
		vec4 gbuffer0Data = imageLoad(gbuffer0Image, samplePos[i]);
		sampleNormalDepth[i] = vec4(DecodeNormal(gbuffer0Data), DecodeDepth(gbuffer0Data));
	}

	vec2 targetOffset = p - vec2(topLeft);
	ivec2 size = imageSize(gbuffer0Image);

	vec4 weights;
	ComputeBilinearWeights(targetOffset, size, samplePos, weights);
	weights /= dot(vec4(1.0), weights);

	vec3 normal = vec3(0.0);
	float depth = 0.0;

	for(int i = 0; i < 4; ++i)
	{
		normal += sampleNormalDepth[i].rgb * weights[i];
		depth += sampleNormalDepth[i].a * weights[i];
	}

	normalDepth = vec4(normalize(normal), depth);

	vec2 uv = (vec2(closest) + vec2(0.5)) / vec2(size);
	vec4 gbuffer0Data = imageLoad(gbuffer0Image, closest);
	origin = DecodePosition(gbuffer0Data, uv);
	origin += normalDepth.xyz;
}

void main()
{
	float occlusion = 0.0;

	ivec2 outSize = imageSize(outAOImage);

	// Check if not outside boundaries
	if(gl_GlobalInvocationID.x >= outSize.x || gl_GlobalInvocationID.y >= outSize.y) return;

	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	vec2 curTexPos = (gl_GlobalInvocationID.xy + 0.5) / vec2(outSize);
	vec2 curSampleGPos = vec2(curTexPos * vec2(imageSize(gbuffer0Image)) - vec2(0.5));

	vec4 normalDepth;
	vec3 origin;
	ComputeValues(curSampleGPos, normalDepth, origin);

	float hitDistance = 0.0;
	if (normalDepth.rgb != vec3(0))
	{
		// Initialize the random number
		uint seed = TEA(outSize.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, frame_number);
		vec3 direction;

		// Move origin slightly away from the surface to avoid self-occlusion
		origin = OffsetRay(origin, normalDepth.rgb);

		// Finding the basis (tangent and bitangent) from the normal
		vec3 n, tangent, bitangent;
		ComputeDefaultBasis(normalDepth.rgb, tangent, bitangent);

		// Sampling hemiphere n-time
		for(int i = 0; i < rtao_samples; i++)
		{
			// Cosine sampling
			float r1        = RND(seed);
			float r2        = RND(seed);
			float sq        = sqrt(1.0 - r2);
			float phi       = 2 * M_PI * r1;
			vec3  direction = vec3(cos(phi) * sq, sin(phi) * sq, sqrt(r2));
			direction       = direction.x * tangent + direction.y * bitangent + direction.z * normalDepth.rgb;
			// Initializes a ray query object but does not start traversal
			rayQueryEXT rayQuery;

			float dis = 0.0;
			occlusion += TraceRay(rayQuery, origin, direction, dis);
			hitDistance += dis;
		}

		// Computing occlusion
		hitDistance = hitDistance / rtao_samples;
		occlusion = 1 - (occlusion / rtao_samples);
		occlusion = clamp(occlusion, 0, 1);
	}
	else
	{
		hitDistance = rtao_radius + 0.001;
		occlusion = 1.0;
	}

	imageStore(outAOImage, storePos, vec4(occlusion, 0, 0, 0));
	imageStore(outHitDistanceImage, storePos, vec4(hitDistance, 0, 0, 0));
	imageStore(meanOutputImage, storePos, vec4(occlusion, occlusion * occlusion, 0, 0));
	imageStore(curNormalDepthImage, storePos, normalDepth);
}