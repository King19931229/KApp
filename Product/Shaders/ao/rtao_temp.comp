#include "sampling.h"
#include "rtao_define.h"

layout(binding = BINDING_REPROJECTED, rgba16f) uniform image2D reprojectedImage;
layout(binding = BINDING_CUR_HITDISTANCE, r16f) uniform image2D curHitDistanceImage;
layout(binding = BINDING_CUR_SQARED_MEAN, r16f) uniform image2D curSqaredMeanImage;
layout(binding = BINDING_CUR_TSPP, r16f) uniform image2D curTsppImage;
layout(binding = BINDING_CUR_AO, r16f) uniform image2D curAOImage;
layout(binding = BINDING_LOCAL_MEAN_VARIANCE_OUTPUT, rg16f) uniform image2D localMeanVarianceImage;
layout(binding = BINDING_VARIANCE, rg16f) uniform image2D varianceImage;
layout(binding = BINDING_BLUR_STRENGTH, rg16f) uniform image2D blurStrengthImage;

layout(binding = BINDING_UNIFORM) uniform AOProperties 
{
	float rtao_radius;
	int   rtao_samples;
	float rtao_power;
	int   rtao_distance_based;
	int   frame_number;
	int	  enable_checkboard;
};

void main()
{
	ivec2 outSize = imageSize(curAOImage);

	// Check if not outside boundaries
	if (gl_GlobalInvocationID.x >= outSize.x || gl_GlobalInvocationID.y >= outSize.y) return;

	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);

	vec4 cachedValues = imageLoad(reprojectedImage, storePos);
	uint tspp = floatBitsToUint(imageLoad(curTsppImage, storePos).a);
	cachedValues.w = float(tspp);

	bool isCurrentFrameValueActive = true;//mod(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y, 2) == mod(frame_number, 2);

	const float InvalidAOCoefficientValue = -1.0;

	float value = isCurrentFrameValueActive ? imageLoad(curAOImage, storePos).r : InvalidAOCoefficientValue;
	bool isValidValue = value != InvalidAOCoefficientValue;
	float valueSquaredMean = isValidValue ? value * value : InvalidAOCoefficientValue;
	float rayHitDistance = InvalidAOCoefficientValue;
	float variance = InvalidAOCoefficientValue;

	if (tspp > 0)
	{
		const float minSmoothingFactor = 0.03;
		uint maxTspp = uint(round(1.0 / minSmoothingFactor));
		tspp = isValidValue ? min(tspp + 1, maxTspp) : tspp;

		float cachedValue = cachedValues.r;
		vec2 localMeanVariance = imageLoad(localMeanVarianceImage, storePos).rg;
		float localMean = localMeanVariance.x;
		float localVariance = localMeanVariance.y;

		const bool clampCachedValues = true;
		if (clampCachedValues)
		{
			const float stdDevGamma = 0.6;
			const float clamping_minStdDevTolerance = 0.05;

			float localStdDev = max(stdDevGamma * sqrt(localVariance), clamping_minStdDevTolerance);
			float nonClampedCachedValue = cachedValue;

			// Clamp value to mean +/- std.dev of local neighborhood to surpress ghosting on value changing due to other occluder movements.
			// Ref: Salvi2016, Temporal Super-Sampling
			cachedValue = clamp(cachedValue, localMean - localStdDev, localMean + localStdDev);

			const float clampDifferenceToTsppScale = 4.0;
			// Scale down the tspp based on how strongly the cached value got clamped to give more weight to new samples.
			float TsppScale = clamp(clampDifferenceToTsppScale * abs(cachedValue - nonClampedCachedValue), 0.0, 1.0);
			tspp = uint(round(mix(float(tspp), 0, TsppScale)));
		}

		const bool forceUseMinSmoothingFactor = false;
		float invTspp = 1.f / float(tspp);
		float a = forceUseMinSmoothingFactor ? minSmoothingFactor : max(invTspp, minSmoothingFactor);
		float MaxSmoothingFactor = 1;
		a = min(a, MaxSmoothingFactor);

		// TODO: use average weighting instead of exponential for the first few samples 
		//  to even out the weights for the noisy start instead of giving first samples much more weight than the rest.
		//  Ref: Koskela2019, Blockwise Multi-Order Feature Regression for Real-Time Path-Tracing Reconstruction

		// Value.
		value = isValidValue ? mix(cachedValue, value, a) : cachedValue;

		// Value Squared Mean.
		float cachedSquaredMeanValue = cachedValues.y; 
		valueSquaredMean = isValidValue ? mix(cachedSquaredMeanValue, valueSquaredMean, a) : cachedSquaredMeanValue;

		const float minTsppToUseTemporalVariance = 4.0;
		// Variance.
		float temporalVariance = valueSquaredMean - value * value;
		temporalVariance = max(0, temporalVariance);
		// Ensure variance doesn't go negative due to imprecision.
		variance = float(tspp) >= minTsppToUseTemporalVariance ? temporalVariance : localVariance;
		variance = max(0.1, variance);

		// RayHitDistance.
		rayHitDistance = isValidValue ? imageLoad(curHitDistanceImage, storePos).r : 0;
		float cachedRayHitDistance = cachedValues.z;
		rayHitDistance = isValidValue ? mix(cachedRayHitDistance, rayHitDistance, a) : cachedRayHitDistance;
	}
	else
	{
		tspp = 1;
		value = value;

		rayHitDistance = imageLoad(curHitDistanceImage, storePos).r;
		variance = imageLoad(localMeanVarianceImage, storePos).y;
		valueSquaredMean = valueSquaredMean;
	}

	const float blurStrength_MaxTspp = 12.0;
	const float blurDecayStrength = 1.0;
	float TsppRatio = min(float(tspp), blurStrength_MaxTspp) / blurStrength_MaxTspp;
	float blurStrength = pow(1 - TsppRatio, blurDecayStrength);

	imageStore(curTsppImage, storePos, vec4(uintBitsToFloat(tspp)));
	imageStore(curAOImage, storePos, vec4(value));
	imageStore(curSqaredMeanImage, storePos, vec4(valueSquaredMean));
	imageStore(curHitDistanceImage, storePos, vec4(rayHitDistance));
	imageStore(varianceImage, storePos, vec4(variance));
	imageStore(blurStrengthImage, storePos, vec4(blurStrength));
}