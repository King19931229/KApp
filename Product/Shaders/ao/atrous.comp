#include "rtao_define.h"
#define GAUSSIAN_KERNEL_3X3
#include "rtao_define.h"
#include "kernal.h"

layout(binding = BINDING_VARIANCE, r16f) uniform image2D varianceImage;
layout(binding = BINDING_CUR_AO, r16f) uniform image2D curAOImage;
layout(binding = BINDING_CUR_NORMAL_DEPTH, rgba16f) uniform image2D curNormalDepthImage;

layout(binding = BINDING_ATROUS_AO, r16f) uniform image2D outImage;

vec2 DDXYDepth(ivec2 samplePos, ivec2 size)
{
	float depth = imageLoad(curNormalDepthImage, samplePos).a;

	ivec2 xBiasSampleGPos = samplePos + ivec2(1, 0);
	float xBiasDepth = IsWithinBounds(xBiasSampleGPos, size) ? imageLoad(curNormalDepthImage, xBiasSampleGPos).a : depth;

	ivec2 yBiasSampleGPos = samplePos + ivec2(0, 1);
	float yBiasDepth = IsWithinBounds(yBiasSampleGPos, size) ? imageLoad(curNormalDepthImage, yBiasSampleGPos).a : depth;

	return vec2(xBiasDepth - depth, yBiasDepth - depth);
}

float DepthThreshold(float depth, vec2 ddxy, vec2 pixelOffset)
{
	float depthThreshold;
	depthThreshold = dot(vec2(1.0), abs(pixelOffset * ddxy));
	return depthThreshold;
}

void AddFilterContribution(
	in out float weightedValueSum, 
	in out float weightSum, 
	float value, 
	float stdDeviation,
	float depth, 
	vec3 normal, 
	vec2 ddxy,
	uint row, 
	uint col,
	ivec2 curSamplePos,
	ivec2 kernelStep,
	ivec2 outSize
)
{
 	const float valueSigma = 1.0;
	const float normalSigma = 64.0;
	const float depthSigma = 1.0;

	float kernelWidth;
	float varianceScale = 1;

	ivec2 pixelOffset = ivec2(int(row) - int(Radius), int(col) - int(Radius)) * kernelStep;
	ivec2 samplePos = curSamplePos + pixelOffset;

	if (IsWithinBounds(samplePos, outSize))
	{
		float iValue = imageLoad(curAOImage, samplePos).r;
		vec4 iNormalDepth = imageLoad(curNormalDepthImage, samplePos);
		vec3 iNormal = iNormalDepth.xyz;
		float iDepth = iNormalDepth.w;

		// Calculate a weight for the neighbor's contribtuion.
		// Ref:[SVGF]
		float w;
		{
			// Value based weight.
			// Lower value tolerance for the neighbors further apart. Prevents overbluring sharp value transitions.
			// Ref: [Dammertz2010]
			const float errorOffset = 0.005f;
			float valueSigmaDistCoef = 1.0 / length(vec2(pixelOffset));
			float e_x = -abs(value - iValue) / (valueSigmaDistCoef * valueSigma * stdDeviation + errorOffset);
			float w_x = exp(e_x);

			// Normal based weight.
			float w_n = pow(max(0, dot(normal, iNormal)), normalSigma);

			// Depth based weight.
			float w_d;
			{
				float depthFloatPrecision = FloatPrecision(max(depth, iDepth), 5, 10);
				float depthThreshold = DepthThreshold(depth, ddxy, pixelOffset);
				float depthTolerance = depthSigma * depthThreshold + depthFloatPrecision;
				float delta = abs(depth - iDepth);
				delta = max(0, delta - depthFloatPrecision); // Avoid distinguising initial values up to the float precision. Gets rid of banding due to low depth precision format.
				w_d = exp(-delta / depthTolerance);
				// Scale down contributions for samples beyond tolerance, but completely disable contribution for samples too far away.
				const float depthWeightCutoff = 0.2;
				w_d *= float(w_d >= depthWeightCutoff);
			}

			// Filter kernel weight.
			float w_h = Kernel[row][col];

			// Final weight.
			w = w_h * w_n * w_x * w_d;
		}

		weightedValueSum += w * iValue;
		weightSum += w;
	}
}

void main()
{
	ivec2 outSize = imageSize(outImage);

	if(gl_GlobalInvocationID.x >= outSize.x || gl_GlobalInvocationID.y >= outSize.y) return;

	vec2 curTexPos = (gl_GlobalInvocationID.xy + 0.5) / vec2(outSize);
	ivec2 curSamplePos = ivec2(round(curTexPos * vec2(outSize) - vec2(0.5)));

	float value = imageLoad(curAOImage, curSamplePos).r;
	float variance = imageLoad(varianceImage, curSamplePos).g;
	vec4 normalDepth = imageLoad(curNormalDepthImage, curSamplePos);
	vec2 ddxy = DDXYDepth(curSamplePos, outSize);

	float weightSum = 0;
	float weightedValueSum = 0;
	float stdDeviation = 1;

	float filteredValue = value;

	float w = Kernel[Radius][Radius];
	weightSum = w;
	weightedValueSum = weightSum * value;
	stdDeviation = sqrt(variance);

	const uint minKernelWidth = 3;
	const uint maxKernelWidth = 28;
	const float minVarianceToDenoise = 0.0;

	if (variance >= minVarianceToDenoise)
	{
		ivec2 kernelStep = ivec2(15);
		for (uint r = 0; r < Width; r++)
		{
			for (uint c = 0; c < Width; c++)
			{
				if (r != Radius || c != Radius)
				{
					AddFilterContribution(
						weightedValueSum, 
						weightSum, 
						value, 
						stdDeviation,
						normalDepth.w, 
						normalDepth.xyz, 
						ddxy,
						r, 
						c,
						curSamplePos,
						kernelStep,
						outSize);
				}
			}
		}
	}

	float smallValue = 1e-6f;
	if (weightSum > smallValue)
	{
		filteredValue = weightedValueSum / weightSum;
	}

	imageStore(outImage, curSamplePos, vec4(filteredValue));
}