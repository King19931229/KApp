#extension GL_EXT_ray_tracing : require

#include "raycommon.h"

layout(binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, rgba8) uniform image2D image;
layout(binding = 2) uniform CameraProperties 
{
	mat4 view;
	mat4 proj;
	mat4 viewInverse;
	mat4 projInverse;
} cam;

layout(location = 0) rayPayloadEXT hitPayload prd;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = cam.viewInverse * vec4(0,0,0,1);
	vec4 target = cam.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = cam.viewInverse*vec4(normalize(target.xyz / target.w), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float tMin = 0.001;
	float tMax = 10000.0;
	vec3 hitValue = vec3(0);
	for(;;)
	{
		traceRayEXT(topLevelAS, // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				origin.xyz,     // ray origin
				tMin,           // ray min range
				direction.xyz,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
			);
		hitValue += prd.hitValue * prd.attenuation;

		prd.depth++;
		if(prd.done == 1 || prd.depth >= 10)
			break;

		origin.xyz    = prd.rayOrigin;
		direction.xyz = prd.rayDir;
		prd.done      = 1;  // Will stop if a reflective material isn't hit
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
}