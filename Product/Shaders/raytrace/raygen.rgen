#extension GL_EXT_ray_tracing : require

#include "raycommon.h"
#include "raycone.h"

layout(location = 0) rayPayloadEXT HitPayload prd;

void main() 
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 uv = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2 d = uv * 2.0 - 1.0;

	vec4 origin = camera.viewInv * vec4(0,0,0,1);
	vec4 target = camera.projInv * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = camera.viewInv * vec4(normalize(target.xyz / target.w), 0) ;

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	float tMin = 0.001;
	float tMax = 10000.0;
	vec3 hitValue = vec3(0);

	int MAX_RECURSION = 2;
	float attenuation = 0.2;
	float initial = (attenuation - 1.0) / (pow(attenuation, MAX_RECURSION) - 1);

	prd.attenuation = vec3(initial);
	prd.rayOrigin = origin.xyz;
	prd.rayDir = direction.xyz;
	prd.sum = vec3(0.0);
	prd.depth = 0;	
	SurfaceHit surf = InitializeSurfaceHit(origin.xyz, uv);
	prd.cone = ComputeRayConeFromGBuffer(surf, distance(prd.rayOrigin, DecodePositionFromGBuffer(uv)));

	while(prd.depth < MAX_RECURSION)
	{
		traceRayEXT(topLevelAS, // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				prd.rayOrigin,  // ray origin
				tMin,           // ray min range
				prd.rayDir,     // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
			);
		hitValue += prd.hitValue * prd.attenuation;
		// Miss
		if(prd.done == 1)
			break;
		prd.sum += prd.attenuation;
		prd.attenuation *= attenuation;
		++prd.depth;
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.0));
}