#include "sh_basic.h"

layout(binding = SH_BINDING_COEFFICIENT) buffer uucoff { vec4 ucoff[]; };
layout(binding = SH_BINDING_CUBEMAP, rgba16f) uniform imageCube cubemap;

shared vec4 sharedData[SH_GROUP_SIZE * SH_GROUP_SIZE][9];

void main()
{
	ivec2 size = imageSize(cubemap).xy;
	// Check if not outside boundaries
	if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;
	ivec3 texCoord = ivec3(gl_GlobalInvocationID.xyz);
	vec2 uv = vec2(texCoord.xy) / size;
	float fTmp = 1 + uv.x * uv.x + uv.y * uv.y;
	float fWt = 4.0 / (sqrt(fTmp) * fTmp);

	vec2 offset = 2.0 * uv - vec2(1.0);

	vec4 h[9] = {vec4(0), vec4(0), vec4(0), vec4(0), vec4(0), vec4(0), vec4(0), vec4(0), vec4(0)};

	uint face = gl_GlobalInvocationID.z;
	float sh[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
	vec4 color = imageLoad(cubemap, texCoord).rgba;
	vec3 pos = centers[face] + rights[face] * offset.x + ups[face] * offset.y;
	pos = normalize(pos);
	EvalSH(pos, sh);
	for (int i = 0; i < 9; ++i)
	{
		// coeff
		h[i].xyz += color.xyz * sh[i] * fWt;
		// weight
		h[i].w += fWt;
	}

	for	(int i = 0; i < 9; ++i)
		sharedData[gl_LocalInvocationIndex][i] = h[i];

	memoryBarrierShared();
	barrier();

	int groupSize = SH_GROUP_SIZE * SH_GROUP_SIZE;
	int s = groupSize / 2;
	while (s > 0)
	{
		if (gl_LocalInvocationIndex < s)
		{
			for	(int i = 0; i < 9; ++i)
				sharedData[gl_LocalInvocationIndex][i] += sharedData[gl_LocalInvocationIndex + s][i];
		}
		memoryBarrierShared();
		barrier();
		s /= 2;
	}

	uint gropuId = gl_WorkGroupID.x * (gl_NumWorkGroups.y * gl_NumWorkGroups.z) + gl_WorkGroupID.y * (gl_NumWorkGroups.z) + gl_WorkGroupID.z;

	if(gl_LocalInvocationIndex == 0)
	{
		for	(int i = 0; i < 9; ++i)
		{
			ucoff[9 * gropuId + i] = sharedData[0][i];
		}
	}
}