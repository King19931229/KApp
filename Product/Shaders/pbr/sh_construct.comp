#include "sh_basic.h"

layout(binding = SH_BINDING_COEFFICIENT) buffer uucoff { vec4 ucoff[]; };
layout(binding = SH_BINDING_CUBEMAP, rgba16f) uniform imageCube cubemap;

void main()
{
	ivec2 size = imageSize(cubemap).xy;
	// Check if not outside boundaries
	if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;
	ivec3 texCoord = ivec3(gl_GlobalInvocationID.xyz);
	vec2 uv = vec2(texCoord.xy) / size;
	float fTmp = 1 + uv.x * uv.x + uv.y * uv.y;
	float fWt = 4.0 / (sqrt(fTmp) * fTmp);

	vec2 offset = 2.0 * uv - vec2(1.0);

	uint face = gl_GlobalInvocationID.z;
	float sh[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
	vec3 pos = centers[face] + rights[face] * offset.x + ups[face] * offset.y;
	pos = normalize(pos);
	EvalSH(pos, sh);

	vec3 result = vec3(0);
	for (int i = 0; i < 9; ++i)
	{
		result += sh[i] * ucoff[i].xyz;
	}

	imageStore(cubemap, texCoord, vec4(result, 1.0));
}