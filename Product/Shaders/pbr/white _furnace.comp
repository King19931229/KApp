const float PI = 3.14159265f;
const float HALF_PI = 1.57079f;

#include "pbr.h"

#define GROUP_SIZE 32

layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE, local_size_z = 1) in;
layout (binding = 0, rgba32f) uniform writeonly image2D resultImage;

void main()
{
	ivec2 size = imageSize(resultImage).xy;
	// Check if not outside boundaries
	if (gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;
	const ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
	const vec2 uv = vec2(texCoord.xy) / size;

	const float roughness = uv.x;
	const float nDotV = uv.y;
	const float a = roughness; // (roughness * roughness + 1) * 0.125;

	const int steps = 64;
	const float deltaTheta = 0.5 * PI / steps;
	const float deltaPhi = 2.0 * PI / steps;

	float integral = 0;

	vec3 n = vec3(0, 0, 1);

	// pdf(theta, phi) 		= 1 / (PI * PI)
	// pdf(w) 				= pdf(theta, phi) / sin(theta)
	//						= 1 / (PI * PI * sin(theta))
	// 1.0 / pdf(w)			= sin(theta) * PI * PI
	// N 					= PI * PI / (deltaTheta * deltaPhi)
	// 1.0 / N				= deltaTheta * deltaPhi / (PI * PI)
	// 1.0 / (N * pdf(w)) 	= deltaTheta * deltaPhi * sin(theta)

	vec3 v = vec3(sqrt(1.0 - nDotV * nDotV), 0, nDotV);
	for (int i = 1; i <= steps; ++i)
	{
		const float theta = i * deltaTheta;
		for (int j = 1; j <= steps; ++j)
		{
			const float phi = j * deltaPhi;
			const vec3 l = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
			const vec3 h = normalize(v + l);

			const float D = DistributionGGX(n, h, a);
			const float G = GeometrySmithGGXJoint(n, v, l, a);

			// If we use cos(theta) / PI as f(w) we will always get result 1
			// integral += sin(theta) * cos(theta) / PI;

			integral += sin(theta) * D * G / (4.0 * max(abs(dot(n, v)), MEDIUMP_FLT_MIN));
		}
	}

	/*
	integral = 0;
	for (int i = 1; i <= steps; ++i)
	{
		const float theta = i * deltaTheta;
		for (int j = 1; j <= steps; ++j)
		{
			const float phi = j * deltaPhi;
			const vec3 m = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));

			const float D = DistributionGGX(n, m, a);
			// Definition of normal distribution function, integral of D * dot(n, m) should always get 1
			integral += sin(theta) * D * dot(n, m);
		}
	}
	*/

	integral *= deltaTheta * deltaPhi;

	imageStore(resultImage, texCoord, vec4(integral));
}